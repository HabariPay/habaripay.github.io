"use strict";(self.webpackChunkhabari_docs=self.webpackChunkhabari_docs||[]).push([[829],{7480:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>f,frontMatter:()=>d,metadata:()=>m,toc:()=>p});var a=t(5893),r=t(1151),s=t(4866),i=t(5162),o=t(3615),c=t(6775),u=t(5812);const d={sidebar_position:2},l="API Specifications",m={id:"Virtual-accounts/api-specifications",title:"API Specifications",description:"Specification For Virtual Accounts",source:"@site/docs/Virtual-accounts/api-specifications.mdx",sourceDirName:"Virtual-accounts",slug:"/Virtual-accounts/api-specifications",permalink:"/squad-docs/Virtual-accounts/api-specifications",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Virtual-accounts/api-specifications.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Virtual Accounts",permalink:"/squad-docs/Virtual-accounts/virtual-account"},next:{title:"Encryption & Decryption",permalink:"/squad-docs/Virtual-accounts/encryption-decryption"}},h={},p=[{value:"Specification For Virtual Accounts",id:"specification-for-virtual-accounts",level:3},{value:"API KEYS (Test Environment)",id:"api-keys-test-environment",level:4},{value:"Creating Virtual Account",id:"creating-virtual-account",level:3},{value:"IMPORTANT NOTICE",id:"important-notice",level:4},{value:"Sample Request of create endpoint with Slug",id:"sample-request-of-create-endpoint-with-slug",level:3},{value:"Customer Model",id:"customer-model",level:3},{value:"IMPORTANT NOTICE",id:"important-notice-1",level:4},{value:"Sample Request",id:"sample-request",level:3},{value:"Business Model",id:"business-model",level:3},{value:"IMPORTANT NOTICE",id:"important-notice-2",level:4},{value:"Sample Request",id:"sample-request-1",level:3},{value:"Transaction Notification Service",id:"transaction-notification-service",level:3},{value:"Webhook Validation",id:"webhook-validation",level:3},{value:"Method 1 (Hash Comparison)",id:"method-1-hash-comparison",level:3},{value:"Sample Implementations",id:"sample-implementations",level:3},{value:"Method 2 (Decryption of Encrypted Body)",id:"method-2-decryption-of-encrypted-body",level:3},{value:"Sample Webhook Notification",id:"sample-webhook-notification",level:3},{value:"WEBHOOK ERROR LOG",id:"webhook-error-log",level:2},{value:"Get Webhook Error Log",id:"get-webhook-error-log",level:3},{value:"Delete Webhook Error Log",id:"delete-webhook-error-log",level:3},{value:"Query Customer Transaction by Customer Identifier",id:"query-customer-transaction-by-customer-identifier",level:3},{value:"Query All Merchant&#39;s Transactions",id:"query-all-merchants-transactions",level:3},{value:"Query All Merchant Transactions with Multiple Filters",id:"query-all-merchant-transactions-with-multiple-filters",level:3},{value:"Get Customer Details by Virtual Account Number",id:"get-customer-details-by-virtual-account-number",level:3},{value:"Get Customer Details Using Customer Identifier",id:"get-customer-details-using-customer-identifier",level:3},{value:"Update Customer&#39;s BVN and Unfreeze Transaction",id:"update-customers-bvn-and-unfreeze-transaction",level:3},{value:"Query All Merchant&#39;s Virtual Accounts",id:"query-all-merchants-virtual-accounts",level:3},{value:"Update Beneficiary Account",id:"update-beneficiary-account",level:3},{value:"Sample Request",id:"sample-request-2",level:4},{value:"Simulate Payment",id:"simulate-payment",level:4},{value:"Go Live",id:"go-live",level:3}];function y(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"api-specifications",children:"API Specifications"}),"\n",(0,a.jsx)(n.h3,{id:"specification-for-virtual-accounts",children:"Specification For Virtual Accounts"}),"\n",(0,a.jsx)(n.h4,{id:"api-keys-test-environment",children:"API KEYS (Test Environment)"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create an account on our sandbox environment: sandbox.squadco.com"}),"\n",(0,a.jsx)(n.li,{children:"Retrieve keys from the bottom of the Get Started Page"}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Authorization Any request made without the authorization key will fail with a 401 (Service Not Authorized) response code."})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Authorization would be done via Headers using Keys gotten from your dashboard."})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example:"}),"\nAuthorization: Bearer sandbox_sk_94f2b798466408ef4d19e848ee1a4d1a3e93f104046f"]}),"\n",(0,a.jsx)(n.p,{children:"This API specification helps you create a virtual account and also integrates payment reconciliation for your customers."}),"\n",(0,a.jsx)(n.p,{children:"You can also trace payments to virtual accounts and link them up with customer details."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Reconciliation: For instant settlement when using our Virtual Account, All merchant and beneficiary accounts must be GTCO Bank Accounts."})}),"\n",(0,a.jsx)(n.h3,{id:"creating-virtual-account",children:"Creating Virtual Account"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"You need to make a POST Request to a dedicated endpoint containing your customer information."})}),"\n",(0,a.jsx)(n.h4,{id:"important-notice",children:"IMPORTANT NOTICE"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Please note that there is a new compliance rule put in place to mitigate against fraud. As a result, all virtual accounts must carry a slug as a prefix to the name. The slug must be a portion of your business name or abbreviations of your business name as one word. Please note that slash (/) is not allowed and only hyphen (-) can be used.\nPlease be informed that all accounts without the prefix will be flagged by our compliance team and might ultimately be closed."})})}),"\n",(0,a.jsx)(n.h3,{id:"sample-request-of-create-endpoint-with-slug",children:"Sample Request of create endpoint with Slug"}),"\n",(0,a.jsx)(n.p,{children:"If my business name is TechZilla Solutions, then I will have to create my account with the format below:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Business Model\n{\n    "customer_identifier": "CCC",\n    "business_name": "Techzilla-Joseph Okoye",\n    "mobile_num": "08139011943",\n    "bvn": "12343211654",\n    "beneficiary_account":\xa0"4920299492"\n}\n\n\nCustomer Model\n{\n    "customer_identifier": "CCC",\n    "first_name": "Techzilla- Joesph",\n    "last_name": "Okoye",\n    "mobile_num": "08139011943",\n    "email": "ayo@gmail.com",\n    "bvn": "12343211654",\n    "dob": "30/10/1990",\n    "address": "22 Kota street, UK",\n    "gender": "1",\n    "beneficiary_account":\xa0"4920299492"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"customer-model",children:"Customer Model"}),"\n",(0,a.jsx)(n.h4,{id:"important-notice-1",children:"IMPORTANT NOTICE"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Please note that there is a new compliance rule put in place to mitigate against fraud. As a result, all virtual accounts must carry a slug as a prefix to the name. The slug must be a portion of your business name or abbreviations of your business name as one word. Please note that slash (/) is not allowed and only hyphen can be used.\nPlease be informed that all accounts without the prefix will be flagged by our compliance and fraud team and might ultimately be closed."})})}),"\n",(0,a.jsx)(o.Z,{items:u.sR,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account",method:"POST",header:"Creating Virtual Accounts for Customers",summary:"*asterisked are required and mandatory."}),"\n",(0,a.jsx)(c.C,{items:u.DK}),"\n",(0,a.jsx)(n.p,{children:"Response expected from the API to signify if the request received was successful"}),"\n",(0,a.jsx)(n.h3,{id:"sample-request",children:"Sample Request"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "customer_identifier": "CCC",\n    "first_name": "BusinessName-Joesph",\n    "last_name": "Ayodele",\n    "mobile_num": "08139011943",\n    "email": "ayo@gmail.com",\n    "bvn": "12343211654",\n    "dob": "30/10/1990",\n    "address": "22 Kota street, UK",\n    "gender": "1",\n    "beneficiary_account": "4920299492"\n}\n'})}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "customer_identifier": "CCC",\n    "first_name": "BusinessName-Joesph",\n    "last_name": "Ayodele",\n    "mobile_num": "08139011943",\n    "email": "ayo@gmail.com",\n    "bvn": "12343211654",\n    "dob": "30/10/1990",\n    "address": "22 Kota street, UK",\n    "gender": "1",\n    "beneficiary_account": "4920299492"\n}\n'})})}),(0,a.jsx)(i.Z,{value:"validation-failure",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "Validation Failure, Customer identifier is required",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"Restricted",label:"401: Restricted",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 401,\n    "success": false,\n    "message": "Merchant has been restricted, please contact Habaripay support",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"not-found",label:"404: Not Found",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "success": false,\n    "message": "",\n    "data": {}\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"business-model",children:"Business Model"}),"\n",(0,a.jsx)(n.p,{children:"This allows you to create virtual accounts for people whose customers are actually businesses (B2B) or other merchants and might not be able to provide all the necessary details that a customer should have."}),"\n",(0,a.jsx)(n.h4,{id:"important-notice-2",children:"IMPORTANT NOTICE"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Please note that there is a new compliance rule put in place to mitigate against fraud. As a result, all virtual accounts must carry a slug as a prefix to the name. The slug must be a portion of your business name or abbreviations of your business name as one word. Please note that slash (/) is not allowed and only hyphen can be used.\nPlease be informed that all accounts without the prefix will be flagged by our compliance and fraud team and might ultimately be closed."})})}),"\n",(0,a.jsx)(n.h3,{id:"sample-request-1",children:"Sample Request"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'{\n    "customer_identifier": "CCC",\n    "business_name": "Joesph- Ayodele",\n    "mobile_num": "08139011943",\n    "bvn": "12343211654",\n    "beneficiary_account": "4920299492"\n}\n'})}),"\n",(0,a.jsx)(o.Z,{items:u.Sr,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/business",method:"POST",header:"Creating Virtual Account for businesses"}),"\n",(0,a.jsx)(c.C,{items:u.le}),"\n",(0,a.jsx)(n.h3,{id:"transaction-notification-service",children:"Transaction Notification Service"}),"\n",(0,a.jsx)(n.p,{children:"Upon registration and verification as a merchant, you are to create a Webhook and add on your Squad Dashboard to receive notification on payments."}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WEBHOOK: If a webhook is not provided, notifications won't be sent."})})}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"KINDLY ENSURE YOU HAVE A TRANSACTION REFERENCE CHECKER WHEN IMPLEMENTING WEBHOOKS TO AVOID GIVING DOUBLE VALUE ON TRANSACTIONS."})})]}),"\n",(0,a.jsx)(n.h3,{id:"webhook-validation",children:"Webhook Validation"}),"\n",(0,a.jsx)(n.h3,{id:"method-1-hash-comparison",children:"Method 1 (Hash Comparison)"}),"\n",(0,a.jsx)(n.p,{children:"The webhook notification sent carry the x-squad-signature in the header. The hash value (x-squad-signature) is an HMAC SHA512 signature of the webhook payload signed using your secret key."}),"\n",(0,a.jsx)(n.p,{children:"You are expected to create a hash and compare the value of the hash created with the hash sent in the header of the POST request sent to your webhook URL."}),"\n",(0,a.jsx)(n.p,{children:"To create the hash, you use the entire payload sent via the webhook."}),"\n",(0,a.jsx)(n.p,{children:"To create the hash, you use the entire payload sent via the webhook."}),"\n",(0,a.jsx)(n.h3,{id:"sample-implementations",children:"Sample Implementations"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"C",label:"C#",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Newtonsoft.Json.Linq;\nnamespace HMacExample\n{\n  class Program {\n    static void Main(string[] args) {\n      String key = "YOUR_SECRET_KEY"; //replace with your squad secret_key\n\n      //Replace with the body of the notification received\n      String webhookPayload = "THE_BODY_OF_THE_WEBHOOK_PAYLOAD YOU RECEIVED";\n      String jsonInput = JsonConvert.SerializeObject(webhookPayload);\n      String result = "";\n      byte[] secretkeyBytes = Encoding.UTF8.GetBytes(key);\n      byte[] inputBytes = Encoding.UTF8.GetBytes(jsonInput);\n      using (var hmac = new HMACSHA512(secretkeyBytes))\n      {\n          byte[] hashValue = hmac.ComputeHash(inputBytes);\n          result = BitConverter.ToString(hashValue).Replace("-", string.Empty);;\n      }\n      Console.WriteLine(result);\n      String x-squad-signature = "Request\'s header value for x-squad-signature" //replace with the request\'s header value for x-squad-signature here\n      if(result.Equals(x-squad-signature)) {\n          // you can trust the event came from squad and so you can give value to customer\n      } else {\n          // this request didn\'t come from Squad, ignore it\n      }\n    }\n  }\n}\n'})})}),(0,a.jsx)(i.Z,{value:"js",label:"Javascript (Node)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const crypto = require("crypto");\nconst secret = "Your Squad Secret Key";\n// Using Express\napp.post("/MY-WEBHOOK-URL", function (req, res) {\n  //validate event\n  const hash = crypto\n    .createHmac("sha512", secret)\n    .update(JSON.stringify(req.body))\n    .digest("hex");\n  if (hash == req.headers["x-squad-signature"]) {\n    // you can trust the event came from squad and so you can give value to customer\n  } else {\n    // this request didn\'t come from Squad, ignore it\n  }\n  res.send(200);\n});\n'})})}),(0,a.jsx)(i.Z,{value:"php",label:"PHP",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"`\n<?php\nif ((strtoupper($_SERVER['REQUEST_METHOD']) != 'POST' ) || !array_key_exists('x-squad-signature', $_SERVER) )\n    exit();\n// Retrieve the request's body\n$input = @file_get_contents(\"php://input\");\n$body = json_decode($input);\ndefine('SQUAD_SECRET_KEY','YOUR_SECRET_KEY'); //ENTER YOUR SECRET KEY HERE\n\nif($_SERVER['x-squad-signature'] !== hash_hmac('sha512',  json_encode($body, JSON_UNESCAPED_SLASHES), SQUAD_SECRET_KEY))\n// The Webhook request is not from SQUAD\n    exit();\nhttp_response_code(200);\n// The Webhook request is from SQUAD\n\nexit();\n?>`\n"})})}),(0,a.jsx)(i.Z,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package hmacexample;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.json.JSONException;\nimport org.json.JSONObject;\npublic class HMacExample {\n  public static void main(String[] args) throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, JSONException {\n    //This verifies that the request is from Squad\n\n    String key = "YOUR_SECRET_KEY"; //replace with your squad secret_key\n\n    String body = "BODY_OF_THE_WEBHOOK_PAYLOAD"; //Replace with body of the webhook payload\n\n    String result = "";\n    String HMAC_SHA512 = "HmacSHA512";\n    String x-squad-signature = ""; //put in the request\'s header value for x-squad-signature\n\n    byte [] byteKey = key.getBytes("UTF-8");\n    SecretKeySpec keySpec = new SecretKeySpec(byteKey, HMAC_SHA512);\n    Mac sha512_HMAC = Mac.getInstance(HMAC_SHA512);\n    sha512_HMAC.init(keySpec);\n    byte [] mac_data = sha512_HMAC.\n    doFinal(body.toString().getBytes("UTF-8"));\n    result = String.format("%040x", new BigInteger(1, mac_data));\n    if(result.equals(x-squad-signature)) {\n      // you can trust that this is from squad\n    }else{\n      // this isn\'t from Squad, ignore it\n    }\n  }\n}\n\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"method-2-decryption-of-encrypted-body",children:"Method 2 (Decryption of Encrypted Body)"}),"\n",(0,a.jsx)(n.p,{children:"To validate the webhook sent to you, you are expected to decrypt the hashed body (encrypted_body) of data sent via the webhook using the Public and Secret Key found on your squad dashboard."}),"\n",(0,a.jsx)(n.p,{children:"The result of this decryption is to be compared against the body of data sent from the webhook, if they match then you can trust that the notification is from squad and if they don't then you know the notification didn't originate from squad and you are expected to ignore such notifications."}),"\n",(0,a.jsx)(n.p,{children:"To decrypt the hashed body, kindly visit our encryption and decryption page for sample decryption functions in different languages."}),"\n",(0,a.jsx)(n.h3,{id:"sample-webhook-notification",children:"Sample Webhook Notification"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "transaction_reference": "REF2023022815174720339_1",\n  "virtual_account_number": "0733848693",\n  "principal_amount": "0.20",\n  "settled_amount": "0.20",\n  "fee_charged": "0.00",\n  "transaction_date": "2023-02-28T00:00:00.000Z",\n  "customer_identifier": "5UMKKK3R",\n  "transaction_indicator": "C",\n  "remarks": "Transfer FROM WILLIAM JAMES | [5UM2B63R] TO CHIZOBA ANTHONY OKOYE",\n  "currency": "NGN",\n  "channel": "virtual-account",\n  "sender_name": "WILLIAM JAMES",\n  "meta": {\n    "freeze_transaction_ref": null,\n    "reason_for_frozen_transaction": null\n  },\n  "encrypted_body": "DiPEa8Z4Cbfiqulhs3Q8lVJXGjMIFzbWwI2g7utVGbiI96TjcbjW+64iQrDR+kbZBwisMLMfB5l+Bn0/9kchGjB+xj6bLc6SnyCaku3pCMKmiVSkr/US1lsk+dBBI53nkGcUFkhige35wBYtXC7IpB/N2DCrzXTW5kEGnr9lCvpEFvDhZzDIUVeUCxV14V92vYYP/8O8Zjj3WR9keUc7Qq0H+fl/jmm7VwCtKMSp0OXNGMVPk5TJkLR52hQ8Rap+oorORLoNau1FRLzA24AW0d+nQfqbI+B4hf5+RztP7F1PpiRlo5qR7EthNpaHW6EMYp9fFUQdJRzsQNLbU/IfnH5oK9zFjHaOfKAa5rnoWP3N5IQjz6wobLq9T2KHei3UpCioFMcKYoigtJxple26auq0vCDkDoalPF6+YaqpuKFWdjX0mLz9+Xh5OCq4AI4u3GhioYFbpAvkrzk/Eyh5OdrEvDDLsbSu8lnXymOoiYXuS1Y4Y5jVZpzAArJ7wX7rdi1KLawHu8/m6fBkQLq/82olUuGLtGdPKF1JZnbv3eAXa7+IMhF4QUvsd52uMRnBdEHXfij+WHp7mz4jMP4Gxsx19Xzt7gyWqBhyswEJobDMSZhk/9GRcETwnT0dlSlWxVOL2pVSzKhc73ASxEQCZCO3/5/i1Nq6qSTjsbplLKuwP2Qr/15rP6TvVWAIpxa8"\n}\n\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"You are expected to send us a response confirming receipt of the request"})}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"\n{\n    response_code:200,\n    transaction_reference: 'unique reference sent through the post',\n    response_description: 'Success'\n}\n\n"})})}),(0,a.jsx)(i.Z,{value:"validation-failure",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"\n{\n    response_code:400,\n    transaction_reference: 'unique reference sent through the post',\n    response_description: 'Validation failure'\n}\n\n"})})}),(0,a.jsx)(i.Z,{value:"system-malfunction",label:"500: System Malfunction",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"\n{\n    response_code:500,\n    transaction_reference: 'unique reference sent through the post',\n    response_description: 'System malfunction'\n}\n\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"webhook-error-log",children:"WEBHOOK ERROR LOG"}),"\n",(0,a.jsx)(n.p,{children:"This API allows you retrieve all your missed webhook transactions and use it to update your record without manual input."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The top 100 missed webhook will always be returned by default and it"}),"\n",(0,a.jsx)(n.li,{children:"This flow involves integration of two(2) APIs"}),"\n",(0,a.jsx)(n.li,{children:"Once you have updated the record of a particular transaction, you are expected to use the second API to delete the record from the error log. If this is not done, the transaction will continuously be returned to you in the first 100 transactions until you delete it."}),"\n",(0,a.jsx)(n.li,{children:"This will only work for those who respond correctly to our webhook calls."}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Also, ensure you have a transaction duplicate checker to ensure you don't update a record twice or update a record you have updated using the webhook or the transaction API."})}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Authorization Any request made without the authorization key (secret key) will fail with a 401 (Unauthorized) response code."})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"The authorization key is sent via the request header as Bearer Token Authorization"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example:"}),"\nAuthorization: Bearer sandbox_sk_94f2b798466408ef4d19e848ee1a4d1a3e93f104046f"]}),"\n",(0,a.jsx)(n.h3,{id:"get-webhook-error-log",children:"Get Webhook Error Log"}),"\n",(0,a.jsx)(o.Z,{items:u.wo,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/webhook/logs",method:"GET",header:"This API returns an array of transactions from the webhook error log"}),"\n",(0,a.jsx)(c.C,{items:u.Hp}),"\n",(0,a.jsx)(n.h3,{id:"delete-webhook-error-log",children:"Delete Webhook Error Log"}),"\n",(0,a.jsx)(o.Z,{items:u.pk,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/webhook/logs/:transaction_ref",method:"DELETE",header:"This API enables you delete a processed transaction from the webhook error log",summary:"When you delete the transaction from the log, it won't be returned to you again. Failure to delete a transaction will result in the transaction being returned to you in the top 100 transactions returned each time you retry."}),"\n",(0,a.jsx)(c.C,{items:u.Ke}),"\n",(0,a.jsx)(n.h3,{id:"query-customer-transaction-by-customer-identifier",children:"Query Customer Transaction by Customer Identifier"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to query the transactions a customer has made. This is done using the customer's identifier which was passed when creating the virtual account."}),"\n",(0,a.jsx)(o.Z,{items:u.qR,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/customer/transactions/{{customer_identifier}}",method:"GET",header:"Query Customer Transactions",summary:"Note: The customer identifier is to be passed via the endpoint being queried. That is: replace {{customer_identifier}} on the end point with the customer identifier of the customer whose transactions you want to query."}),"\n",(0,a.jsx)(n.p,{children:"Response expected from the API to show queried Virtual Accounts."}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": [\n        {\n            "transaction_reference": "74902084jjjfksoi93004891_1",\n            "virtual_account_number": "2224449991",\n            "principal_amount": "30000.00",\n            "settled_amount": "0.00",\n            "fee_charged": "0.00",\n            "transaction_date": "2022-04-21T09:00:00.000Z",\n            "transaction_indicator": "C",\n            "remarks": "Payment from 10A2 to 2224449991",\n            "currency": "NGN",\n            "frozen_transaction": {\n                "freeze_transaction_ref": "afbd9b7f-fb98-41c3-bfe8-dc351cfb45c7",\n                "reason": "Amount above 20000 when BVN not set"\n            },\n            "customer": {\n                "customer_identifier": "SBN1EBZEQ8"\n            }\n        },\n{\n            "transaction_reference": "676767_1",\n            "virtual_account_number": "2224449991",\n            "principal_amount": "1050.00",\n            "settled_amount": "1037.00",\n            "fee_charged": "13.00",\n            "transaction_date": "2022-03-21T09:00:00.000Z",\n            "transaction_indicator": "C",\n            "remarks": "Payment from 10A2 to 2224449991",\n            "currency": "NGN",\n            "froze_transaction": null,\n            "customer": {\n                "customer_identifier": "SBN1EBZEQ8"\n            }\n        }\n    ]\n}\n'})})}),(0,a.jsx)(i.Z,{value:"validation-failure",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "Customer identifier or merchant identifier is required",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"Restricted",label:"401: Restricted",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 401,\n    "success": false,\n    "message": "Merchant has been restricted, please contact Habaripay support",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"not-found",label:"404: Not Found",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 401,\n    "success": false,\n    "message": "",\n    "data": {}\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"query-all-merchants-transactions",children:"Query All Merchant's Transactions"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to query all the merchant transactions over a period of time."}),"\n",(0,a.jsx)(o.Z,{items:u.PF,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/merchant/transactions",method:"GET",header:"Query All Transactions",summary:"Note: The endpoint is to be queried using just the authorization key from the dashboard"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"SuccessfulMerchant",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'\n{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": [\n        {\n            "transaction_reference": "4894fe1_1",\n            "virtual_account_number": "2244441333",\n            "principal_amount": "5000.00",\n            "settled_amount": "0.00",\n            "fee_charged": "0.00",\n            "transaction_date": "2022-04-21T09:00:00.000Z",\n            "transaction_indicator": "C",\n            "remarks": "Payment from 15B8 to 2244441333",\n            "currency": "NGN",\n            "frozen_transaction": {\n                "freeze_transaction_ref": "afbd9b7f-fb98-41c3-bfe8-dc351cfb45c7",\n                "reason": "Amount above 20000 when BVN not set"\n            },\n            "customer": {\n                "customer_identifier": "SBN1EBZEQ8"\n            }\n        },\n{\n            "transaction_reference": "676767_1",\n            "virtual_account_number": "2224449991",\n            "principal_amount": "30000.00",\n            "settled_amount": "1037.00",\n            "fee_charged": "13.00",\n            "transaction_date": "2022-03-21T09:00:00.000Z",\n            "transaction_indicator": "C",\n            "remarks": "Payment from 10A2 to 2224449991",\n            "currency": "NGN",\n            "froze_transaction": null,\n            "customer": {\n                "customer_identifier": "SBN1EBZEQ8"\n            }\n        }\n    ]\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"validation-failureMerchant",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "Merchant identifier is required",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"Restricted",label:"401: Restricted",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 401,\n    "success": false,\n    "message": "Merchant has been restricted, please contact Habaripay support",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"not-found",label:"404: Not Profiled",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 404,\n    "success": false,\n    "message": "Merchant is not profiled for this service, please contact Habaripay support",\n    "data": {}\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"query-all-merchant-transactions-with-multiple-filters",children:"Query All Merchant Transactions with Multiple Filters"}),"\n",(0,a.jsx)(n.p,{children:"This endpoint allows you query all transactions and filter using multiple parameters like virtual account number, start and end dates, customer Identifier etc"}),"\n",(0,a.jsx)(o.Z,{items:u.kD,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/merchant/transactions/all",method:"GET",header:"Query All Transactions with Multiple Filters",summary:"This endpoint allows you query all transactions and filter using multiple parameters like virtual account number, start and end dates, customer Identifier etc"}),"\n",(0,a.jsx)(c.C,{items:u.oO}),"\n",(0,a.jsx)(n.h3,{id:"get-customer-details-by-virtual-account-number",children:"Get Customer Details by Virtual Account Number"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to retrieve the details of a customer using the Virtual Account Number"}),"\n",(0,a.jsx)(o.Z,{items:u.Xk,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/customer/{{virtual_account_number}}",method:"GET",header:"Retrieve Virtual Account Details",summary:"Note: The virtual account number is to be passed via the endpoint being queried. That is: replace {{virtual_account_number}} on the end point with the virtual account number whose details you want to retrieve."}),"\n",(0,a.jsx)(c.C,{items:u.bs}),"\n",(0,a.jsx)(n.h3,{id:"get-customer-details-using-customer-identifier",children:"Get Customer Details Using Customer Identifier"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to retrieve the details of a customer'svirtual account using the Customer Identifier"}),"\n",(0,a.jsx)(o.Z,{items:u.tp,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/{{customer_identifier}}",method:"GET",header:"Retrieve Virtual Account Details",summary:"Note: The customer_identifier is to be passed via the endpoint being queried. That is: replace {{customer_identifier}} on the end point with the customer identifier of the customer whose virtual account you want to retrieve."}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": {\n        "first_name": "Wisdom",\n        "last_name": "Trudea",\n        "bank_code": "737",\n        "virtual_account_number": "555666777",\n        "customer_identifier": "10D2",\n        "created_at": "2022-01-13T11:03:54.252Z",\n        "updated_at": "2022-01-13T11:09:51.657Z"\n    }\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"validation-failure",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "Merchant identifier is required",\n    "data": {},\n\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"not-profiled",label:"404: Not Profiled",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 404,\n    "success": false,\n    "message": "No virtual account is associated",\n    "data": {}\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"update-customers-bvn-and-unfreeze-transaction",children:"Update Customer's BVN and Unfreeze Transaction"}),"\n",(0,a.jsx)(o.Z,{items:u.Qq,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/update/bvn",method:"PATCH",header:"Update customer's BVN and unfreeze transaction"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": {}\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"validation-failure",label:"400: Validation Failure",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "BVN verification failed",\n    "data": {}\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"not-updated",label:"424: Not Updated",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 424,\n    "success": false,\n    "message": "An error occurred while trying to update customer\'s bvn",\n    "data": {}\n}\n'})})}),(0,a.jsx)(i.Z,{value:"conflict",label:"409: Conflict",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 409,\n    "success": false,\n    "message": "Customer\'s first_name & last_name didn\'t match or phone_number didn\'t  match.",\n    "data": {}\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"query-all-merchants-virtual-accounts",children:"Query All Merchant's Virtual Accounts"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to look-up the virtual account numbers related to a merchant."}),"\n",(0,a.jsx)(o.Z,{items:u.t$,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/merchant/accounts",method:"GET",header:"Find All Virtual Account Number by Merchant",summary:"This is an endpoint for merchants to query and retrieve all their virtual account."}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"Successful",label:"200: Successful",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": [\n        {\n            "bank_code": "058",\n            "virtual_account_number": "2224449991",\n            "beneficiary_account": "4829023412",\n            "created_at": "2022-02-09T16:02:39.170Z",\n            "updated_at": "2022-02-09T16:02:39.170Z",\n            "customer": {\n                "first_name": "Ifeanyi",\n                "last_name": "Igweh",\n                "customer_identifier": "10A2"\n            }\n        },\n        {\n            "bank_code": "058",\n            "virtual_account_number": "111444999",\n            "beneficiary_account": "9829023411",\n            "created_at": "2022-02-09T16:02:39.170Z",\n            "updated_at": "2022-02-09T16:02:39.170Z",\n            "customer": {\n                "first_name": "Paul",\n                "last_name": "Aroso",\n                "customer_identifier": "10B2"\n            }\n        }\n    ]\n}\n\n'})})}),(0,a.jsx)(i.Z,{value:"not-profiled",label:"404: Not Profiled",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "status": 400,\n    "success": false,\n    "message": "Merchant identifier is required",\n    "data": {},\n}\n\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"update-beneficiary-account",children:"Update Beneficiary Account"}),"\n",(0,a.jsx)(n.h4,{id:"sample-request-2",children:"Sample Request"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n    "beneficiary_account":"1111111111",\n    "virtual_account_number": "4683366555"\n}\n\n'})}),"\n",(0,a.jsx)(o.Z,{items:u.A9,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/update/beneficiary/account",method:"PATCH",header:"This is used to update beneficiary account"}),"\n",(0,a.jsx)(c.C,{items:u.SQ}),"\n",(0,a.jsx)(n.h4,{id:"simulate-payment",children:"Simulate Payment"}),"\n",(0,a.jsx)(n.p,{children:"This is an endpoint to simulate payments"}),"\n",(0,a.jsx)(o.Z,{items:u.nB,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/simulate/payment",method:"POST",header:"Simulate Payment",summary:"This is an endpoint to simulate payment *asterisks are required and mandatory."}),"\n",(0,a.jsx)(c.C,{items:u.a}),"\n",(0,a.jsx)(n.h3,{id:"go-live",children:"Go Live"}),"\n",(0,a.jsx)(n.p,{children:"To go live, simply:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Change the base URL for your endpoints from sandbox-api-d.squadco.com to\napi-d.squadco.com"}),"\n",(0,a.jsx)(n.li,{children:"Sign up on our Live Environment"}),"\n",(0,a.jsx)(n.li,{children:"Complete your KYC"}),"\n",(0,a.jsx)(n.li,{children:"Share the Merchant ID with the Technical Account Manager for Profiling"}),"\n",(0,a.jsx)(n.li,{children:"Use the secret keys provided on the dashboard to authenticate your live transactions"}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(y,{...e})}):y(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var a=t(512);const r={tabItem:"tabItem_Ymn6"};var s=t(5893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,i),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>T});var a=t(7294),r=t(512),s=t(2466),i=t(6550),o=t(469),c=t(1980),u=t(7392),d=t(12);function l(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return l(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function y(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=m(e),[i,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[u,l]=p({queryString:t,groupId:r}),[y,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),g=(()=>{const e=u??y;return h({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{g&&c(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),l(e),f(e)}),[l,f,s]),tabValues:s}}var f=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=t(5893);function b(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),r=o[t].value;r!==a&&(u(n),i(r))},l=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,_.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:l,onClick:d,...s,className:(0,r.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function x(e){const n=y(e);return(0,_.jsxs)("div",{className:(0,r.Z)("tabs-container",g.tabList),children:[(0,_.jsx)(b,{...e,...n}),(0,_.jsx)(v,{...e,...n})]})}function T(e){const n=(0,f.Z)();return(0,_.jsx)(x,{...e,children:l(e.children)},String(n))}},5812:(e,n,t)=>{t.d(n,{A9:()=>x,By:()=>Z,DK:()=>s,E$:()=>C,E0:()=>E,Ex:()=>I,F7:()=>O,GP:()=>k,H2:()=>q,Hp:()=>u,Ke:()=>l,Kw:()=>w,ND:()=>V,PF:()=>h,Qq:()=>b,SQ:()=>T,Sr:()=>i,Tv:()=>P,VU:()=>R,Xk:()=>f,a:()=>j,bs:()=>g,cc:()=>M,eT:()=>N,kD:()=>p,le:()=>o,nB:()=>S,oO:()=>y,pk:()=>d,qR:()=>m,sR:()=>r,t$:()=>v,tp:()=>_,wB:()=>A,wo:()=>c});var a=t(8830);const r=[{title:"Body",children:[{key:"first_name",dataType:"String",description:"customer first name",required:!0},{key:"last_name",dataType:"String",description:"customer last name",required:!0},{key:"middle_name",dataType:"String",description:"customer middle name",required:!1},{key:"mobile_num",dataType:"String",description:"08012345678 (doesn't take more than 11 digits)",required:!0},{key:"dob",dataType:"Date",description:"dd/mm/yyyy",required:!0},{key:"email",dataType:"String",description:"customer email",required:!1},{key:"bvn",dataType:"String",description:"BVN is compulsory",required:!0},{key:"gender",dataType:"String",description:"'1' - Male, '2' -Female",required:!0},{key:"address",dataType:"String",description:"customer address",required:!0},{key:"customer_identifier",dataType:"String",description:"unique customer identifier as given by merchant",required:!0},{key:"beneficiary_account",dataType:"String",description:"Beneficiary Account is the 10 Digit Bank Account Number (GTBank) provided by the Merchant where money sent to this Virtual account is paid into. Please note that when beneficiary account is not provided, money paid into this virtual account go into your wallet and will be paid out/settled in T+1 settlement time.",required:!1}]}],s=[{status:"200:OK",responseMsg:"Success Response",pill:a.O?.greenColor,code:'{\n            "customer_identifier": "CCC",\n            "first_name": "Techzilla- Joesph",\n            "last_name": "Okoye",\n            "mobile_num": "08139011943",\n            "email": "ayo@gmail.com",\n            "bvn": "12343211654",\n            "dob": "30/10/1990",\n            "address": "22 Kota street, UK",\n            "gender": "1",\n            "beneficiary_account":\xa0"4920299492"\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong API keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],i=[{title:"Body",children:[{key:"bvn",dataType:"String",description:"Bank Verification Number",required:!0},{key:"business_name",dataType:"String",description:"Name of Business/Customer",required:!0},{key:"customer_identifier",dataType:"String",description:"An alphanumeric string used to identify a customer/business in your system which will be tied to the virtual account being created",required:!0},{key:"mobile_num",dataType:"String",description:"Customer's Phone Number Sample: 08012345678 (doesn't take more than 11 digits)",required:!0},{key:"beneficiary_account",dataType:"Date",description:"Beneficiary Account is your 10 Digit Bank Account Number (GTBank) where money sent to this Virtual account is paid into. Please note that when beneficiary account is not provided, money paid into this virtual account go into your wallet and will be paid out/settled in T+1 settlement time.",required:!1}]}],o=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Techzilla-Will",\n                "last_name": "Okoye",\n                "bank_code": "058",\n                "virtual_account_number": "2474681469",\n                "beneficiary_account": null,\n                "customer_identifier": "Tech910260",\n                "created_at": "2023-08-07T13:18:21.287Z",\n                "updated_at": "2023-08-07T13:18:21.287Z"\n            }\n}'},{status:"400:Bad Request",responseMsg:"Bad Request",pill:a.O?.orangeColor,code:'{\n            "status": 400,\n            "success": false,\n            "message": ""customer_identifier" is required",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No API key",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid Authorization key or token",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],c=[{title:"Query",children:[{key:"page",dataType:"Integer",description:"The page you are on",required:!1},{key:"perPage",dataType:"Integer",description:"Number of records you want to appear on a page",required:!1}]}],u=[{status:"200:OK",responseMsg:"Response description",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count": 2,\n                "rows": [\n                    {\n                        "id": "229f9f3d-53e4-450e-a9e9-164a8b882a60",\n                        "payload": {\n                            "hash": "659c24ba0b6c3ac324b587f2f079c8ee876c56609ff11b7106cd868f84674a5c37fcb088373859f8d900713f03c47d819de79623cde67e70bbca945fd20f3cb3",\n                            "meta": {\n                                "freeze_transaction_ref": null,\n                                "reason_for_frozen_transaction": null\n                            },\n                            "channel": "virtual-account",\n                            "remarks": "Transfer FROM OKOYE, CHIZOBA ANTHONY | [CCtyttytC] TO CHIZOBA ANTHONY OKOYE",\n                            "currency": "NGN",\n                            "fee_charged": "0.05",\n                            "sender_name": "OKOYE, CHIZOBA ANTHONY",\n                            "encrypted_body": "DiPEa8Z4Cbfiqulhs3Q8lVJXGjMIFzbWwI2g7utVGbhXihbtK3H2xsA/+ZnjOpFA0AU8vAN5LUTEH6elfrK58ub2wydaRk0ngvQXWUFz3iB19qWBcdGQRnppKAT/AB5xyy1iQZvEHP7zq3Y7na5zcx9ttkU1mZIeAIoisM9k+ghVLxkTeql4UvfFcLyDdGzMd/BC4YgJFyrZxifhfhKi073od7xJnz4Hhz08UBE/FAwNYMWkwWD9izlbcaaJtfh1VIN6t9rl1gotlb5qmNq/UytgoSvuN5uaEXxegdB3VWvmsDMHqoYwDs4oEuv0lp8zUUG3cZ9zPQ6xH3shGQjVOWErkuIfCk62fRzkwxya4Gu/x2KHMSQjutbvD4vNDjVGfuCIoHuZEXPThWrq1jpTy7cNMLc8ZZ8IowJnfwWHL+O6fuepxXxfrJHlswMCI35ZHSvef1AEXgbUlx2O7yzytceCogpUkY+QJ1yLddl1FeE1u2JKOM+casP3pfiT+t3Mv55aSCVQO7hUy46gd6H/bIHaSIp2K3CcjfdflZ/bxCZaZoe/sRqfVdVIzpSpTc0Lq5sOXM2gijOdeg+zex/CgnMIKGJdzUT9YUJtaaVrMmhk0EcM0rHRrqs0iM7xaSTdZ7K8hnzl0RPJhDXIhu5a/Y2NxS3ZTC2lYRVZd6I3lerpoMQG69VfmqvaVgW2k03f",\n                            "settled_amount": "49.95",\n                            "principal_amount": "50.00",\n                            "transaction_date": "2023-09-01T00:00:00.000Z",\n                            "customer_identifier": "CCtyttytC",\n                            "transaction_indicator": "C",\n                            "transaction_reference": "REF20230901162737156459_1",\n                            "virtual_account_number": "0760640237"\n                        },\n                        "transaction_ref": "REF20230901162737156459_1"\n                    }\n                ]\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'}],d=[{title:"Path",children:[{key:"transaction_ref",dataType:"String",description:"Unique Transaction Ref that identifies each virtual account and gotten from the retrieved webhook error log",required:!0}]}],l=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": 1\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],m=[{title:"Path",children:[{key:"customer_identifier",dataType:"String",description:"Unique Customer Identifier that identifies each virtual account",required:!1}]}],h=[{title:"No Parameters"}],p=[{title:"Query",children:[{key:"page",dataType:"Integer",description:"Page Number to Display",required:!1},{key:"perPage",dataType:"Integer",description:"Number of records per Page",required:!1},{key:"virtualAccount",dataType:"Integer",description:"a unique 10-digit virtual account number",required:!1},{key:"customerIdentifier",dataType:"String",description:"Unique Identifier used to create/identify a customer's virtual account",required:!1},{key:"startDate",dataType:"Date",description:"MM-DD-YYYY E.G: 09-19-2022",required:!1},{key:"endDate",dataType:"Date",description:"MM-DD-YYYY E.G: 09-19-2022",required:!1},{key:"transactionReference",dataType:"String",description:"Unique Identifier of a transaction",required:!1},{key:"session_id",dataType:"String",description:"Unique ID that identifies all NIP transactions",required:!1},{key:"dir",dataType:"String",description:"Takes two possible values: 'DESC' and 'ASC'. 'DESC' - descending order ,'ASC' - ascending order",required:!1}]}],y=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": {\n        "count": 15,\n        "rows": [\n            {\n                "transaction_reference": "REF20221007130357_1",\n                "virtual_account_number": "0713810881",\n                "principal_amount": "50.00",\n                "settled_amount": "50.00",\n                "fee_charged": "0.00",\n                "transaction_date": "2022-10-07T00:00:00.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample | [CCC1234334] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-10-07T12:04:11.635Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "CCC1234334"\n                }\n            },\n            {\n                "transaction_reference": "REF20221004191517_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-10-04T00:00:00.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample Name4 | [OPPO] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-10-04T18:15:29.463Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220913181048_1",\n                "virtual_account_number": "0709108705",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-09-13T18:10:48.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample Name4 | [TSP/00008786500] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-09-20T09:51:04.999Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "TSP/00008786500"\n                }\n            },\n            {\n                "transaction_reference": "REF20220713143436_1",\n                "virtual_account_number": "0713694755",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-07-13T14:34:36.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name | [123CCC] to Sample Name5",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-07-13T13:35:13.410Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "123CCC"\n                }\n            },\n            {\n                "transaction_reference": "REF20220707162950_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-07-07T16:29:50.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name4 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-07-07T15:30:06.761Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220624160230_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-24T16:02:30.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name5 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-24T15:03:29.054Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220624155515_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-24T15:55:15.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name4 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-24T14:56:23.266Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220623095446_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-23T09:54:46.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-23T08:55:06.599Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617131121_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-17T13:11:21.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T12:11:38.228Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617130949_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T13:09:49.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T12:10:14.605Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617125618_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T12:56:18.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from sample Name1 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T11:56:42.868Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617115436_1",\n                "virtual_account_number": "0709056301",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T11:54:36.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [TSP/00002900] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T10:54:54.837Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "TSP/00002900"\n                }\n            }\n        ],\n        "query": {}\n    }\n}'},{status:"400:Bad Request",responseMsg:"Wrong/ Invalid Input",pill:a.O?.orangeColor,code:'{\n        "status": 400,\n        "success": false,\n        "message": ""virtualAccount" is not allowed to be empty",\n        "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid Keys/Token",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],f=[{title:"Path",children:[{key:"virtual_account_number",dataType:"String",description:"Unique 10-digit virtual account number assigned to a customer",required:!0}]}],g=[{status:"200:OK",responseMsg:"Valid Virtual Account Number",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Timothy",\n                "last_name": "Oke",\n                "mobile_num": "08000000000",\n                "email": "atioke@gmail.com",\n                "customer_identifier": "CCtyttytC",\n                "virtual_account_number": "0686786837"\n            }\n}'},{status:"404:Not Found",responseMsg:"Invalid Virtual Account Number",pill:a.O?.orangeColor,code:'{\n            "status": 404,\n            "success": false,\n            "message": "Virtual account not found",\n            "data": {}\n}'}],_=[{title:"Path",children:[{key:"customer_identifier",dataType:"String",description:"Unique Customer Identifier that identifies each virtual account",required:!1}]}],b=[{title:"Path",children:[{key:"customer_bvn",dataType:"String",description:"Bank Verification Number of Customer",required:!0},{key:"customer_identifier",dataType:"String",description:"Unique number given to customer by merchant.",required:!0},{key:"phone_number",dataType:"String",description:"customer's phone number",required:!0}]}],v=[{title:"Query",children:[{key:"page",dataType:"String",description:"Number of Pages",required:!1},{key:"perPage",dataType:"String",description:"Number of Accounts to be returned per page",required:!1},{key:"startDate",dataType:"Date",description:"YY-MM-DD",required:!1},{key:"EndDate",dataType:"Date",description:"YY-MM-DD",required:!1}]}],x=[{title:"Body",children:[{key:"beneficiary_account",dataType:"String",description:"10 digit valid NUBAN account number",required:!0},{key:"virtual_account_number",dataType:"String",description:"The Virtual account number whose beneficiary account is to be updated",required:!0}]}],T=[{status:"200:OK",responseMsg:"Successful",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Sheena",\n                "last_name": "Grace",\n                "virtual_account_number": "3832649897",\n                "beneficiary_account": "1234567890",\n                "customer_identifier": "2086601683696"\n            }\n}'},{status:"400:Bad Request",responseMsg:"Bad Request",pill:a.O?.orangeColor,code:'{\n            "status": 400,\n            "success": false,\n            "message": ""virtual_account_number" is required",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No/Invalid API Key",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'}],S=[{title:"Header",children:[{key:"content-type",dataType:"String",description:"application/json",required:!0},{key:"Authorization",dataType:"String",description:"Private Key or Secret Key (Gotten from your dashboard)",required:!0}]},{title:"Body",children:[{key:"virtual_account_number",dataType:"String",description:"Virtual Account number of customer that wants to make payment.",required:!0},{key:"amount",dataType:"String",description:"Simulated Amount",required:!0}]}],j=[{status:"200:OK",responseMsg:"Successful",pill:a.O?.greenColor,code:'{\n            "success": true,\n            "message": "Success",\n            "data": {}\n}'}],k=[{language:"Javascript",headerOne:"Encryption",headerTwo:"Decryption",codeOne:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                const cipher = crypto.createCipheriv('aes256', key, IV);\n                let encrypted = cipher.update(JSON.stringify(body), 'utf8', 'base64');\n                return encrypted += cipher.final('base64');\n                ",codeTwo:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                const decipher = crypto.createDecipheriv('aes256', key, IV);\n                let decrypted = decipher.update(body, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return JSON.parse(decrypted);"}],C=[{language:"Python",codeOne:"from Crypto.Cipher import AES\n                import base64\n                import hashlib\n\n\n                def _pad(s): return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size) \n                def _cipher():\n                    key = hashlib.md5(merchant_secret_key).hexdigest() # 32 character hexadecimal\n                    iv = hashlib.md5(merchant_public_key).digest() # 16 byte binary\n                    return AES.new(key=key, mode=AES.MODE_CBC, IV=iv)\n\n                def encrypt_token(data):\n                    return _cipher().encrypt(_pad(data))\n                    \n                def decrypt_token(data):\n                    return _cipher().decrypt(data)\n\n                if __name__ == '__main__':\n                    print('Python encrypt: ' + base64.b64encode(encrypt_token('dmyz.org')))\n                    print('Python decrypt: ' + decrypt_token(base64.b64decode('FSfhJ/gk3iEJOPVLyFVc2Q==')))"}],q=[{language:"PHP",codeOne:" <?php\n\n            class AES\n            {\n                \n                function encryptToken($data, $merchant_secret_key, $merchant_public_key)\n                {\n                    $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                    $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                    // use openssl:\n                    return openssl_encrypt($data, 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                }\n\n                function decryptToken($data, $merchant_secret_key, $merchant_public_key)\n                {\n                    $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                    // use openssl:\n                    return openssl_decrypt(base64_decode($data), 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                \n                }\n            }\n\n            $aes = new AES();\n            $arr = array(\n            'transaction_reference'=>'49test_1',\n            'virtual_account_number'=>'4899284992',\n            'principal_amount'=> '2350.00',\n            'settled_amount'=> '2338.25',\n            'fee_charged'=> '11.75',\n            'transaction_date'=> '2022-02-19T00:00:00.000Z',\n            'customer_identifier'=> '10A2',\n            'transaction_indicator'=> 'C',\n            'remarks'=> 'Payment from 10A2 to 4899284992',\n            'currency'=> 'NGN',\n            'channel'=> 'virtual-account'\n            );\n\n            echo ('PHP encrypt: '.base64_encode($aes->encryptToken(json_encode($arr), 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1'))).\"\n\";\n            echo ('PHP decrypt: '.$aes->decryptToken('Ajc/9TOSwbz1lTReb7BTo4XjL7bzJ0GWIxuncvSXfK83ZsYFt4bOt5+QQRz0jFFNSf6+7Axuqp91rR7aD/YwYczQQgUM+7QrK7nTw1KJbwTvPSSk3/IEektOlUx7DK7uXHlBBN9eVmn8tfDLKrsgj7zhymQhCfCoUTcDou3UyYWbKitwGH0o2X3hZo7cVqqq6Khnb12EwlK2kVhZvAjnu5g+T7erI1+RSb3jjab0MguWO6I3oXs9OGsiQKmCqZn564/q3ojArjk5OR8r3jBFgH4d96FoXS536rS8Toh5KPIVSGUjXLthcsWdgQ2VNzqBJ2iktzftFNgQRMdxQFCpaE0JwTKVkAyX0n3JDXt7DC+cTY+cHvAHRtl0zYhhrqT0WX4x95h+/WCdT27FEIJJJqJPBPHS1VAXwPS/v5sPGqdkqgFngTrYPaExk3YWoTxhonzT2tkagsGCaDuk8eptSA==', 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1')).\"\n\";\n\n            ?>\n                "}],A=[{language:"C#",codeOne:'using System;  \n                using System.IO;  \n                using System.Security.Cryptography;  \n                class ManagedAesSample {  \n                    public static void Main() {  \n                        Console.WriteLine("Enter text that needs to be encrypted..");  \n                        string data = Console.ReadLine();  \n                        EncryptAesManaged(data);  \n                        Console.ReadLine();  \n                    }  \n                    static void EncryptAesManaged(string raw) {  \n                        try {  \n                            // Create Aes that generates a new key and initialization vector (IV).    \n                            // Same key must be used in encryption and decryption    \n                            using(AesManaged aes = new AesManaged()) {  \n                                // Encrypt string    \n                                byte[] encrypted = Encrypt(raw, aes.Key, aes.IV);  \n                                // Print encrypted string    \n                                Console.WriteLine($ "Encrypted data: {System.Text.Encoding.UTF8.GetString(encrypted)}");  \n                                // Decrypt the bytes to a string.    \n                                string decrypted = Decrypt(encrypted, aes.Key, aes.IV);  \n                                // Print decrypted string. It should be same as raw data    \n                                Console.WriteLine($ "Decrypted data: {decrypted}");  \n                            }  \n                        } catch (Exception exp) {  \n                            Console.WriteLine(exp.Message);  \n                        }  \n                        Console.ReadKey();  \n                    }  \n                    static byte[] Encrypt(string plainText, byte[] Key, byte[] IV) {  \n                        byte[] encrypted;  \n                        // Create a new AesManaged.    \n                        using(AesManaged aes = new AesManaged()) {  \n                            // Create encryptor    \n                            ICryptoTransform encryptor = aes.CreateEncryptor(Key, IV);  \n                            // Create MemoryStream    \n                            using(MemoryStream ms = new MemoryStream()) {  \n                                // Create crypto stream using the CryptoStream class. This class is the key to encryption    \n                                // and encrypts and decrypts data from any given stream. In this case, we will pass a memory stream    \n                                // to encrypt    \n                                using(CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write)) {  \n                                    // Create StreamWriter and write data to a stream    \n                                    using(StreamWriter sw = new StreamWriter(cs))  \n                                    sw.Write(plainText);  \n                                    encrypted = ms.ToArray();  \n                                }  \n                            }  \n                        }  \n                        // Return encrypted data    \n                        return encrypted;  \n                    }  \n                    static string Decrypt(byte[] cipherText, byte[] Key, byte[] IV) {  \n                        string plaintext = null;  \n                        // Create AesManaged    \n                        using(AesManaged aes = new AesManaged()) {  \n                            // Create a decryptor    \n                            ICryptoTransform decryptor = aes.CreateDecryptor(Key, IV);  \n                            // Create the streams used for decryption.    \n                            using(MemoryStream ms = new MemoryStream(cipherText)) {  \n                                // Create crypto stream    \n                                using(CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read)) {  \n                                    // Read crypto stream    \n                                    using(StreamReader reader = new StreamReader(cs))  \n                                    plaintext = reader.ReadToEnd();  \n                                }  \n                            }  \n                        }  \n                        return plaintext;  \n                    }  \n}  '}],N=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],E=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count_dynamic_virtual_account": 8\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],w=[{title:"Body",children:[{key:"amount",dataType:"Integer",description:"Amount is in Kobo",required:!0},{key:"duration",dataType:"Integer",description:"Time allowed before an account/transaction is expired. Duration is in seconds. i.e duration:60 = 1 minute",required:!0},{key:"email",dataType:"string",description:"a valid email address for notification to customer",required:!0},{key:"transaction_ref",dataType:"string",description:"Unique transaction Reference that identifies the transaction on your system",required:!0}]}],O=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "is_blocked": false,\n                "account_name": "SQUAD CHECKOUT",\n                "account_number": "4879261135",\n                "expected_amount": "100.00",\n                "expires_at": "2023-08-08T08:23:27.791Z",\n                "transaction_reference": "dva123",\n                "bank": "GTBank",\n                "currency": "NGN"\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],M=[{title:"Path",children:[{key:"transaction_reference",dataType:"String",description:"Merchant's transaction reference passed when initiating / generating the dynamic virtual account.",required:!0}]}],I=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count": 3,\n                "rows": [\n                    {\n                        "transaction_status": "EXPIRED",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:59.672Z",\n                        "refund": false\n                    },\n                    {\n                        "transaction_status": "SUCCESS",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:54.052Z",\n                        "refund": null\n                    },\n                    {\n                        "transaction_status": "MISMATCH",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:29.392Z",\n                        "refund": false\n                    }\n                ]\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],P=[{title:"Body",children:[{key:"transaction_reference",dataType:"String",description:"The transaction ref of the already initiated transaction.",required:!0},{key:"amount",dataType:"Integer",description:"Amount is in Kobo",required:!1},{key:"duration",dataType:"Integer",description:"Amount of time before transaction expires. Duration is in seconds.",required:!1}]}],R=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "account_number": "0852491446",\n                "currency": "NGN",\n                "amount": 5000,\n                "expires_at": "2023-08-30T17:01:46.973Z",\n                "transaction_reference": "ify21"\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'},{status:"404:Not Found",responseMsg:"Invalid Transaction Ref",pill:a.O?.greenColor,code:'{\n            "status": 404,\n            "success": false,\n            "message": "Transaction not found",\n            "data": {}\n}'}],Z=[{title:"Body",children:[{key:"virtual_account_number",dataType:"String",description:"10-digit Dynamic Account gotten after initiating a virtual transfer. ",required:!0},{key:"amount",dataType:"String",description:"Amount is in naira. This is the expected amount to be transferred into the dynamic virtual account.",required:!0},{key:"dva",dataType:"boolean",description:"true",required:!0}]}],V=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": "Payment successful"\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}]}}]);