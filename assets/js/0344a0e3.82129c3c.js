"use strict";(self.webpackChunkhabari_docs=self.webpackChunkhabari_docs||[]).push([[885],{7309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>h,default:()=>b,frontMatter:()=>p,metadata:()=>y,toc:()=>f});var a,r,s=t(5893),i=t(1151),o=t(3615),c=t(6775),d=t(5812),u=t(7294);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}const m=e=>{let{title:n,titleId:t,...s}=e;return u.createElement("svg",l({width:47,height:53,viewBox:"0 0 47 53",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":t},s),n?u.createElement("title",{id:t},n):null,a||(a=u.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M29.555 0c-3.518 1.707-9.128 4.773-12.792 7.568C7.817 14.39 0 21.786 0 31.06c0 9.815 7.672 17.844 19.517 19.313 2.35.291.359 2.535.359 2.535s1.555-.502 2.614-.862c.308-.105.817.955.817.955s.954-1.099 1.053-1.024c1.147.87 2.68 1.024 2.68 1.024s-2.023-2.329.498-2.666c11.68-1.563 19.226-9.54 19.226-19.275 0-9.77-5.864-16.59-17.24-23.926-1.47-.947-1.637-3.621.03-7.133Zm-4.46 9.833c6.042 5.464 9.062 12.292 9.062 19.12 0 6.826-3.02 13.654-9.061 19.118 8.535-10.42 10.326-26.701 0-38.238Zm-3.472-.002c-6.041 5.464-9.062 12.292-9.062 19.12 0 6.827 3.02 13.654 9.062 19.118-8.536-10.42-10.327-26.7 0-38.238Zm1.737 37.587a259.364 259.364 0 0 0 0-37.68 178.048 178.048 0 0 0 0 37.68Zm7.531-35.539c6.706 5.593 10.578 12.036 10.891 18.255.312 6.22-2.936 12.215-10.47 16.914 13.277-11.537 10.326-24.283-.42-35.169Zm-15.064 0C9.121 17.47 5.25 23.913 4.937 30.133c-.313 6.219 2.934 12.215 10.468 16.913C2.13 35.51 5.08 22.763 15.828 11.88Z",fill:"url(#a)"})),r||(r=u.createElement("defs",null,u.createElement("linearGradient",{id:"a",x1:0,y1:31.583,x2:232.586,y2:31.583,gradientUnits:"userSpaceOnUse"},u.createElement("stop",{stopColor:"#FF4C1D"}),u.createElement("stop",{offset:1,stopColor:"#9B0063"})))))},p={sidebar_position:4},h="Dynamic Virtual Account",y={id:"Virtual-accounts/dynamic-virtual-account-v2",title:"Dynamic Virtual Account",description:"This module contains APIs that allow you generate Virtual Accounts that can be used on a transaction basis. This means that you can set a timer for expiry, a transaction ref, determine the amount to be collected.",source:"@site/docs/Virtual-accounts/dynamic-virtual-account-v2.mdx",sourceDirName:"Virtual-accounts",slug:"/Virtual-accounts/dynamic-virtual-account-v2",permalink:"/Virtual-accounts/dynamic-virtual-account-v2",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Virtual-accounts/dynamic-virtual-account-v2.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Encryption & Decryption",permalink:"/Virtual-accounts/encryption-decryption"},next:{title:"Transfer API",permalink:"/Transfer-API/transfer-apis"}},g={},f=[{value:"Process Flow",id:"process-flow",level:3},{value:"API KEYS (Test Environment)",id:"api-keys-test-environment",level:3},{value:"Create Dynamic VA Accounts",id:"create-dynamic-va-accounts",level:3},{value:"Get Pool Count",id:"get-pool-count",level:3},{value:"Initiate Dynamic Virtual Account Transaction",id:"initiate-dynamic-virtual-account-transaction",level:3},{value:"Sample Request",id:"sample-request",level:4},{value:"Re-query Transaction",id:"re-query-transaction",level:3},{value:"Edit Amount/Duration",id:"edit-amountduration",level:3},{value:"Sample Request",id:"sample-request-1",level:4},{value:"Simulate Payment Endpoint",id:"simulate-payment-endpoint",level:3},{value:"WEBHOOKS",id:"webhooks",level:2},{value:"Sample Webhook Notification (Success)",id:"sample-webhook-notification-success",level:4},{value:"Sample Webhook Notification (Expired)",id:"sample-webhook-notification-expired",level:4},{value:"Sample Webhook Notification (Mismatch)",id:"sample-webhook-notification-mismatch",level:4},{value:"HASH SIGNATURE VALIDATION",id:"hash-signature-validation",level:2},{value:"Webhook Payload to be hashed",id:"webhook-payload-to-be-hashed",level:4},{value:"Webhook Error Log",id:"webhook-error-log",level:4},{value:"Sample Error Log Response for DVA",id:"sample-error-log-response-for-dva",level:4}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"dynamic-virtual-account",children:"Dynamic Virtual Account"}),"\n",(0,s.jsx)(n.p,{children:"This module contains APIs that allow you generate Virtual Accounts that can be used on a transaction basis. This means that you can set a timer for expiry, a transaction ref, determine the amount to be collected.\nIt has various webhook notifications for mismatch, expired and successful transaction as we as a re-query endpoint to see all transactions that have been queued for refunds, and those that have been refunded."}),"\n",(0,s.jsx)(n.h3,{id:"process-flow",children:"Process Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["All accounts must be profiled before you can use this service as it is a restricted service for selected business. Kindly send a mail to ",(0,s.jsx)(n.a,{href:"mailto:help@squadco.com",children:"help@squadco.com"})," or ",(0,s.jsx)(n.a,{href:"mailto:growth@habaripay.com",children:"growth@habaripay.com"})," requesting permission to use this service."]}),"\n",(0,s.jsx)(n.li,{children:"Each merchant is assigned a separate pool of accounts and as such they are expected to create their accounts based on their use case and expected transaction volume."}),"\n",(0,s.jsx)(n.li,{children:"To initiate a transaction, the merchant is to call the generate Dynamic virtual account endpoint and an account from your own pool will be made available for transaction and will be tied to the amount and duration you set."}),"\n",(0,s.jsx)(n.li,{children:"Webhook notification is fired for 3 events: success, expired and mismatch."}),"\n",(0,s.jsx)(n.li,{children:"There is a re-query that shows all payment attempts for a single transaction reference. It returns an array which contains the payment attempts and you can see the various status of either success, expired or mismatch where applicable."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"api-keys-test-environment",children:"API KEYS (Test Environment)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create an account on our sandbox environment: sandbox.squadco.com"}),"\n",(0,s.jsx)(n.li,{children:"Share the merchant ID with the Technical Account Managers for Profiling."}),"\n",(0,s.jsx)(n.li,{children:"Retrieve Authorization keys from the bottom of the Get Started Page."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Authorization",type:"caution",children:(0,s.jsxs)(n.p,{children:["Any request made without the authorization key (secret key) will fail with a ",(0,s.jsx)(n.strong,{children:"401"})," (Unauthorized) response code."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The authorization key is sent via the request header as Bearer Token Authorization"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.p,{children:"Authorization: Bearer sandbox_sk_94f2b798466408ef4d19e848ee1a4d1a3e93f104046f\n\u200b"}),"\n",(0,s.jsx)(n.h3,{id:"create-dynamic-va-accounts",children:"Create Dynamic VA Accounts"}),"\n",(0,s.jsx)(n.p,{children:"This allows you create and assign dynamic virtual accounts to your pool. Only one account is generated per request."}),"\n",(0,s.jsx)(o.Z,{endpoint:"https://sandbox-api-d.squadco.com/virtual-account/create-dynamic-virtual-account",method:"POST",header:"This allows you create and assign dynamic virtual accounts to your pool"}),"\n",(0,s.jsx)(c.C,{items:d.eT}),"\n",(0,s.jsx)(n.h3,{id:"get-pool-count",children:"Get Pool Count"}),"\n",(0,s.jsx)(n.p,{children:"This API gives you the total count of the virtual accounts you have in your pool."}),"\n",(0,s.jsx)(o.Z,{endpoint:"https://sandbox-api-d.squadco.com/virtual-account/count-dynamic-virtual-accounts",method:"GET",header:"This API gives you the total count of the virtual accounts you have in your pool"}),"\n",(0,s.jsx)(c.C,{items:d.E0}),"\n",(0,s.jsx)(n.h3,{id:"initiate-dynamic-virtual-account-transaction",children:"Initiate Dynamic Virtual Account Transaction"}),"\n",(0,s.jsx)(n.p,{children:"This API allows you generate a Dynamic Virtual Account to be assigned to a customer. This is used to initiate a transaction."}),"\n",(0,s.jsx)(o.Z,{items:d.Kw,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/initiate-dynamic-virtual-account",method:"POST",header:"This API allows you generate a Dynamic Virtual Account to be assigned to a customer",summary:"This API allows you generate a Dynamic Virtual Account to be assigned to a customer. This is used to initiate a transaction."}),"\n",(0,s.jsx)(c.C,{items:d.F7}),"\n",(0,s.jsx)(n.h4,{id:"sample-request",children:"Sample Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    "amount":100,\n    "transaction_ref":"Aq1111BddCDqdddqdqqEw2",\n    "duration":600,\n    "email":"hittommyi02@gmail.com"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"re-query-transaction",children:"Re-query Transaction"}),"\n",(0,s.jsx)(n.p,{children:"This API allows you re-query a transaction to see its status. It returns an array of all transaction attempts made including those that returned as a mismatch, those that expired and the successful transaction. Ultimately all expired and mismatched transactions will eventually be refunded."}),"\n",(0,s.jsx)(o.Z,{items:d.cc,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/get-dynamic-virtual-account-transactions/:transaction_reference",method:"GET",header:"This API allows you re-query a transaction to see it's status.",summary:"This API allows you re-query a transaction to see its status. It returns an array of all transaction attempts made including those that returned as a mismatch, those that expired and the successful transaction. Ultimately all expired and mismatched transactions will eventually be refunded."}),"\n",(0,s.jsx)(c.C,{items:d.Ex}),"\n",(0,s.jsx)(n.h3,{id:"edit-amountduration",children:"Edit Amount/Duration"}),"\n",(0,s.jsx)(n.p,{children:"This API allows you to edit the amount/duration of a dynamic transaction that has already been initiated.\nIt takes the transction reference, the amount and duration."}),"\n",(0,s.jsx)(n.h4,{id:"sample-request-1",children:"Sample Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    "transaction_reference": "ify21",\n    "amount": 5000\n}\n'})}),"\n",(0,s.jsx)(o.Z,{items:d.Tv,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/update-dynamic-virtual-account-time-and-amount",method:"PATCH",header:"This API allows you to edit the amount/duration of a dynamic transaction"}),"\n",(0,s.jsx)(c.C,{items:d.VU}),"\n",(0,s.jsx)(n.h3,{id:"simulate-payment-endpoint",children:"Simulate Payment Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"This API allows you push test transactions. Please note that this APi is to be used only on the sandbox environment."}),"\n",(0,s.jsx)(o.Z,{items:d.By,parameters:!0,endpoint:"https://sandbox-api-d.squadco.com/virtual-account/simulate/payment",method:"POST",header:"This is to be used only on the sandbox environment to do test transactions. "}),"\n",(0,s.jsx)(c.C,{items:d.ND}),"\n",(0,s.jsx)(n.h2,{id:"webhooks",children:"WEBHOOKS"}),"\n",(0,s.jsx)(n.p,{children:"Webhook Notification is sent for 3 different events/ status"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Success: first transfer/transaction that is equal to the expected/specified amount and within the set duration."}),"\n",(0,s.jsx)(n.li,{children:"Mismatch: A transfer that happens within the specified duration but expected amount is not equal to the transfered amount."}),"\n",(0,s.jsx)(n.li,{children:"Expired: Transaction that happens after the set duration or after a successful transaction has been recorded, it doesn't matter if the transferred amount is equivalent to the expected amount."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"**To set your webhook, kindly visit your squad dashboard and go to the merchant setting page you will see a field labelled webhook URL. Only accounts with a valid webhook URL will receive notification. **"}),"\n",(0,s.jsx)(n.h4,{id:"sample-webhook-notification-success",children:"Sample Webhook Notification (Success)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "transaction_status": "SUCCESS",\n  "merchant_reference": "Aq1111BddCDqdddqdqqEw4",\n  "merchant_amount": "100.00",\n  "amount_received": "100.00",\n  "transaction_reference": "REFFX8U72GD6/1691478173792",\n  "email": "igwehifeanyi02@gmail.com",\n  "merchant_id": "SBN1EBZEQ8",\n  "transaction_type": "dynamic_virtual_account",\n  "date": "2023-08-08T07:02:54.052Z"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"sample-webhook-notification-expired",children:"Sample Webhook Notification (Expired)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "transaction_status": "EXPIRED",\n  "merchant_reference": "Aq1111BddCDqdddqdqqEw4",\n  "merchant_amount": "100.00",\n  "amount_received": "100.00",\n  "transaction_reference": "REFKGXAMXEDR/1691478179452",\n  "email": "igwehifeanyi02@gmail.com",\n  "merchant_id": "SBN1EBZEQ8",\n  "transaction_type": "dynamic_virtual_account",\n  "date": "2023-08-08T07:02:59.672Z"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"sample-webhook-notification-mismatch",children:"Sample Webhook Notification (Mismatch)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "transaction_status": "MISMATCH",\n  "merchant_reference": "Aq1111BddCDqdddqdqqEw4",\n  "merchant_amount": "100.00",\n  "amount_received": "101.00",\n  "transaction_reference": "REFRQR681DB8/1691478149192",\n  "email": "igwehifeanyi02@gmail.com",\n  "merchant_id": "SBN1EBZEQ8",\n  "transaction_type": "dynamic_virtual_account",\n  "date": "2023-08-08T07:02:29.392Z"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hash-signature-validation",children:"HASH SIGNATURE VALIDATION"}),"\n",(0,s.jsx)(n.p,{children:"Every webhook request comes with a hash signature on the request header. You are expected as a form of security to create a hash and compare to the hash sent via the header.\nThe hash is a sha512 hash of some parameters in the payload using your squad secret/private key."}),"\n",(0,s.jsxs)(n.p,{children:["The signature in the header has the key: ",(0,s.jsx)(n.strong,{children:"x-squad-encrypted-body"})," .\nThe parameters to be hashed are seen below:"]}),"\n",(0,s.jsx)(n.h4,{id:"webhook-payload-to-be-hashed",children:"Webhook Payload to be hashed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n transaction_reference: "REF202308010384993",\n amount_received: "3000",\n merchant_reference: "test_1",\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"webhook-error-log",children:"Webhook Error Log"}),"\n",(0,s.jsx)(n.p,{children:"This contains all missed webhook notifications that we didn't get a 200 response for. The aim of this is to mitigate against missed webhooks."}),"\n",(0,s.jsx)("button",{href:"#",className:"group w-full bg-transparent border border-solid border-gray-200 flex p-5 rounded hover:shadow-sm hover:cursor-pointer",children:(0,s.jsxs)("a",{className:"flex",children:[(0,s.jsx)("div",{children:(0,s.jsx)("img",{src:m,alt:"Squad logo"})}),(0,s.jsxs)("div",{className:"pl-4 text-gray-950 dark:text-white",children:[(0,s.jsx)("p",{className:"p-0 m-0 hover:text-sm group-hover:text-blue-600",children:(0,s.jsx)(n.p,{children:"API Specifications"})}),(0,s.jsx)("p",{className:"pt-1 m-0",children:"Virtual Accounts"})]})]})}),"\n",(0,s.jsx)("p",{className:"text-center text-gray-400 pt-1 text-sm",children:"Click to Open Link"}),"\n",(0,s.jsx)(n.h4,{id:"sample-error-log-response-for-dva",children:"Sample Error Log Response for DVA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": {\n        "count": 2,\n        "rows": [\n            {\n                "id": "2dc56eb3-d997-4e68-adf9-53b603c16a43",\n                "payload": {\n                    "date": "2023-08-09T15:09:54.958Z",\n                    "email": "igwehifeanyi02@gmail.com",\n                    "merchant_id": "SBN1EBZEQ8",\n                    "amount_received": "100.00",\n                    "merchant_amount": "100.00",\n                    "transaction_type": "dynamic_virtual_account",\n                    "merchant_reference": "C2",\n                    "transaction_status": "SUCCESS",\n                    "transaction_reference": "REF7VDV8JV25/1691593794798"\n                },\n                "transaction_ref": "REF7VDV8JV25/1691593794798"\n            },\n            {\n                "id": "b7983af4-ad3e-40ef-91d4-55af04bb2173",\n                "payload": {\n                    "date": "2023-08-09T15:04:41.017Z",\n                    "email": "igwehifeanyi02@gmail.com",\n                    "merchant_id": "SBN1EBZEQ8",\n                    "amount_received": "100.00",\n                    "merchant_amount": "100.00",\n                    "transaction_type": "dynamic_virtual_account",\n                    "merchant_reference": "Cw2",\n                    "transaction_status": "SUCCESS",\n                    "transaction_reference": "REFANGDGNQ1N/1691593480709"\n                },\n                "transaction_ref": "REFANGDGNQ1N/1691593480709"\n            }\n        ]\n    }\n}\n'})})]})}function b(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_,{...e})}):_(e)}},5812:(e,n,t)=>{t.d(n,{A9:()=>v,By:()=>R,DK:()=>s,E$:()=>q,E0:()=>O,Ex:()=>M,F7:()=>j,GP:()=>C,H2:()=>A,Hp:()=>d,Ke:()=>l,Kw:()=>E,ND:()=>z,PF:()=>p,Qq:()=>b,SQ:()=>k,Sr:()=>i,Tv:()=>P,VU:()=>D,Xk:()=>g,a:()=>x,bs:()=>f,cc:()=>I,eT:()=>N,kD:()=>h,le:()=>o,nB:()=>S,oO:()=>y,pk:()=>u,qR:()=>m,sR:()=>r,t$:()=>T,tp:()=>_,wB:()=>w,wo:()=>c});var a=t(8830);const r=[{title:"Body",children:[{key:"first_name",dataType:"String",description:"customer first name",required:!0},{key:"last_name",dataType:"String",description:"customer last name",required:!0},{key:"middle_name",dataType:"String",description:"customer middle name",required:!1},{key:"mobile_num",dataType:"String",description:"08012345678 (doesn't take more than 11 digits)",required:!0},{key:"dob",dataType:"Date",description:"dd/mm/yyyy",required:!0},{key:"email",dataType:"String",description:"customer email",required:!1},{key:"bvn",dataType:"String",description:"BVN is compulsory",required:!0},{key:"gender",dataType:"String",description:"'1' - Male, '2' -Female",required:!0},{key:"address",dataType:"String",description:"customer address",required:!0},{key:"customer_identifier",dataType:"String",description:"unique customer identifier as given by merchant",required:!0},{key:"beneficiary_account",dataType:"String",description:"Beneficiary Account is the 10 Digit Bank Account Number (GTBank) provided by the Merchant where money sent to this Virtual account is paid into. Please note that when beneficiary account is not provided, money paid into this virtual account go into your wallet and will be paid out/settled in T+1 settlement time.",required:!1}]}],s=[{status:"200:OK",responseMsg:"Success Response",pill:a.O?.greenColor,code:'{\n            "customer_identifier": "CCC",\n            "first_name": "Techzilla- Joesph",\n            "last_name": "Okoye",\n            "mobile_num": "08139011943",\n            "email": "ayo@gmail.com",\n            "bvn": "12343211654",\n            "dob": "30/10/1990",\n            "address": "22 Kota street, UK",\n            "gender": "1",\n            "beneficiary_account":\xa0"4920299492"\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong API keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],i=[{title:"Body",children:[{key:"bvn",dataType:"String",description:"Bank Verification Number",required:!0},{key:"business_name",dataType:"String",description:"Name of Business/Customer",required:!0},{key:"customer_identifier",dataType:"String",description:"An alphanumeric string used to identify a customer/business in your system which will be tied to the virtual account being created",required:!0},{key:"mobile_num",dataType:"String",description:"Customer's Phone Number Sample: 08012345678 (doesn't take more than 11 digits)",required:!0},{key:"beneficiary_account",dataType:"Date",description:"Beneficiary Account is your 10 Digit Bank Account Number (GTBank) where money sent to this Virtual account is paid into. Please note that when beneficiary account is not provided, money paid into this virtual account go into your wallet and will be paid out/settled in T+1 settlement time.",required:!1}]}],o=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Techzilla-Will",\n                "last_name": "Okoye",\n                "bank_code": "058",\n                "virtual_account_number": "2474681469",\n                "beneficiary_account": null,\n                "customer_identifier": "Tech910260",\n                "created_at": "2023-08-07T13:18:21.287Z",\n                "updated_at": "2023-08-07T13:18:21.287Z"\n            }\n}'},{status:"400:Bad Request",responseMsg:"Bad Request",pill:a.O?.orangeColor,code:'{\n            "status": 400,\n            "success": false,\n            "message": ""customer_identifier" is required",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No API key",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid Authorization key or token",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],c=[{title:"Query",children:[{key:"page",dataType:"Integer",description:"The page you are on",required:!1},{key:"perPage",dataType:"Integer",description:"Number of records you want to appear on a page",required:!1}]}],d=[{status:"200:OK",responseMsg:"Response description",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count": 2,\n                "rows": [\n                    {\n                        "id": "229f9f3d-53e4-450e-a9e9-164a8b882a60",\n                        "payload": {\n                            "hash": "659c24ba0b6c3ac324b587f2f079c8ee876c56609ff11b7106cd868f84674a5c37fcb088373859f8d900713f03c47d819de79623cde67e70bbca945fd20f3cb3",\n                            "meta": {\n                                "freeze_transaction_ref": null,\n                                "reason_for_frozen_transaction": null\n                            },\n                            "channel": "virtual-account",\n                            "remarks": "Transfer FROM OKOYE, CHIZOBA ANTHONY | [CCtyttytC] TO CHIZOBA ANTHONY OKOYE",\n                            "currency": "NGN",\n                            "fee_charged": "0.05",\n                            "sender_name": "OKOYE, CHIZOBA ANTHONY",\n                            "encrypted_body": "DiPEa8Z4Cbfiqulhs3Q8lVJXGjMIFzbWwI2g7utVGbhXihbtK3H2xsA/+ZnjOpFA0AU8vAN5LUTEH6elfrK58ub2wydaRk0ngvQXWUFz3iB19qWBcdGQRnppKAT/AB5xyy1iQZvEHP7zq3Y7na5zcx9ttkU1mZIeAIoisM9k+ghVLxkTeql4UvfFcLyDdGzMd/BC4YgJFyrZxifhfhKi073od7xJnz4Hhz08UBE/FAwNYMWkwWD9izlbcaaJtfh1VIN6t9rl1gotlb5qmNq/UytgoSvuN5uaEXxegdB3VWvmsDMHqoYwDs4oEuv0lp8zUUG3cZ9zPQ6xH3shGQjVOWErkuIfCk62fRzkwxya4Gu/x2KHMSQjutbvD4vNDjVGfuCIoHuZEXPThWrq1jpTy7cNMLc8ZZ8IowJnfwWHL+O6fuepxXxfrJHlswMCI35ZHSvef1AEXgbUlx2O7yzytceCogpUkY+QJ1yLddl1FeE1u2JKOM+casP3pfiT+t3Mv55aSCVQO7hUy46gd6H/bIHaSIp2K3CcjfdflZ/bxCZaZoe/sRqfVdVIzpSpTc0Lq5sOXM2gijOdeg+zex/CgnMIKGJdzUT9YUJtaaVrMmhk0EcM0rHRrqs0iM7xaSTdZ7K8hnzl0RPJhDXIhu5a/Y2NxS3ZTC2lYRVZd6I3lerpoMQG69VfmqvaVgW2k03f",\n                            "settled_amount": "49.95",\n                            "principal_amount": "50.00",\n                            "transaction_date": "2023-09-01T00:00:00.000Z",\n                            "customer_identifier": "CCtyttytC",\n                            "transaction_indicator": "C",\n                            "transaction_reference": "REF20230901162737156459_1",\n                            "virtual_account_number": "0760640237"\n                        },\n                        "transaction_ref": "REF20230901162737156459_1"\n                    }\n                ]\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'}],u=[{title:"Path",children:[{key:"transaction_ref",dataType:"String",description:"Unique Transaction Ref that identifies each virtual account and gotten from the retrieved webhook error log",required:!0}]}],l=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": 1\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],m=[{title:"Path",children:[{key:"customer_identifier",dataType:"String",description:"Unique Customer Identifier that identifies each virtual account",required:!1}]}],p=[{title:"No Parameters"}],h=[{title:"Query",children:[{key:"page",dataType:"Integer",description:"Page Number to Display",required:!1},{key:"perPage",dataType:"Integer",description:"Number of records per Page",required:!1},{key:"virtualAccount",dataType:"Integer",description:"a unique 10-digit virtual account number",required:!1},{key:"customerIdentifier",dataType:"String",description:"Unique Identifier used to create/identify a customer's virtual account",required:!1},{key:"startDate",dataType:"Date",description:"MM-DD-YYYY E.G: 09-19-2022",required:!1},{key:"endDate",dataType:"Date",description:"MM-DD-YYYY E.G: 09-19-2022",required:!1},{key:"transactionReference",dataType:"String",description:"Unique Identifier of a transaction",required:!1},{key:"session_id",dataType:"String",description:"Unique ID that identifies all NIP transactions",required:!1},{key:"dir",dataType:"String",description:"Takes two possible values: 'DESC' and 'ASC'. 'DESC' - descending order ,'ASC' - ascending order",required:!1}]}],y=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n    "status": 200,\n    "success": true,\n    "message": "Success",\n    "data": {\n        "count": 15,\n        "rows": [\n            {\n                "transaction_reference": "REF20221007130357_1",\n                "virtual_account_number": "0713810881",\n                "principal_amount": "50.00",\n                "settled_amount": "50.00",\n                "fee_charged": "0.00",\n                "transaction_date": "2022-10-07T00:00:00.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample | [CCC1234334] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-10-07T12:04:11.635Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "CCC1234334"\n                }\n            },\n            {\n                "transaction_reference": "REF20221004191517_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-10-04T00:00:00.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample Name4 | [OPPO] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-10-04T18:15:29.463Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220913181048_1",\n                "virtual_account_number": "0709108705",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-09-13T18:10:48.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer FROM Sample Name4 | [TSP/00008786500] TO Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-09-20T09:51:04.999Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "TSP/00008786500"\n                }\n            },\n            {\n                "transaction_reference": "REF20220713143436_1",\n                "virtual_account_number": "0713694755",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-07-13T14:34:36.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name | [123CCC] to Sample Name5",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-07-13T13:35:13.410Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "123CCC"\n                }\n            },\n            {\n                "transaction_reference": "REF20220707162950_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-07-07T16:29:50.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name4 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-07-07T15:30:06.761Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220624160230_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-24T16:02:30.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name5 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-24T15:03:29.054Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220624155515_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-24T15:55:15.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name4 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-24T14:56:23.266Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220623095446_1",\n                "virtual_account_number": "0710954717",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-23T09:54:46.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [12345] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-23T08:55:06.599Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "12345"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617131121_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "30.00",\n                "settled_amount": "29.85",\n                "fee_charged": "0.15",\n                "transaction_date": "2022-06-17T13:11:21.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T12:11:38.228Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617130949_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T13:09:49.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T12:10:14.605Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617125618_1",\n                "virtual_account_number": "0708729381",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T12:56:18.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from sample Name1 | [OPPO] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T11:56:42.868Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "OPPO"\n                }\n            },\n            {\n                "transaction_reference": "REF20220617115436_1",\n                "virtual_account_number": "0709056301",\n                "principal_amount": "50.00",\n                "settled_amount": "49.75",\n                "fee_charged": "0.25",\n                "transaction_date": "2022-06-17T11:54:36.000Z",\n                "transaction_indicator": "C",\n                "remarks": "Transfer from Sample Name3 | [TSP/00002900] to Sample Name",\n                "currency": "NGN",\n                "alerted_merchant": false,\n                "merchant_settlement_date": "2022-06-17T10:54:54.837Z",\n                "frozen_transaction": null,\n                "customer": {\n                    "customer_identifier": "TSP/00002900"\n                }\n            }\n        ],\n        "query": {}\n    }\n}'},{status:"400:Bad Request",responseMsg:"Wrong/ Invalid Input",pill:a.O?.orangeColor,code:'{\n        "status": 400,\n        "success": false,\n        "message": ""virtualAccount" is not allowed to be empty",\n        "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid Keys/Token",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],g=[{title:"Path",children:[{key:"virtual_account_number",dataType:"String",description:"Unique 10-digit virtual account number assigned to a customer",required:!0}]}],f=[{status:"200:OK",responseMsg:"Valid Virtual Account Number",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Timothy",\n                "last_name": "Oke",\n                "mobile_num": "08000000000",\n                "email": "atioke@gmail.com",\n                "customer_identifier": "CCtyttytC",\n                "virtual_account_number": "0686786837"\n            }\n}'},{status:"404:Not Found",responseMsg:"Invalid Virtual Account Number",pill:a.O?.orangeColor,code:'{\n            "status": 404,\n            "success": false,\n            "message": "Virtual account not found",\n            "data": {}\n}'}],_=[{title:"Path",children:[{key:"customer_identifier",dataType:"String",description:"Unique Customer Identifier that identifies each virtual account",required:!1}]}],b=[{title:"Path",children:[{key:"customer_bvn",dataType:"String",description:"Bank Verification Number of Customer",required:!0},{key:"customer_identifier",dataType:"String",description:"Unique number given to customer by merchant.",required:!0},{key:"phone_number",dataType:"String",description:"customer's phone number",required:!0}]}],T=[{title:"Query",children:[{key:"page",dataType:"String",description:"Number of Pages",required:!1},{key:"perPage",dataType:"String",description:"Number of Accounts to be returned per page",required:!1},{key:"startDate",dataType:"Date",description:"YY-MM-DD",required:!1},{key:"EndDate",dataType:"Date",description:"YY-MM-DD",required:!1}]}],v=[{title:"Body",children:[{key:"beneficiary_account",dataType:"String",description:"10 digit valid NUBAN account number",required:!0},{key:"virtual_account_number",dataType:"String",description:"The Virtual account number whose beneficiary account is to be updated",required:!0}]}],k=[{status:"200:OK",responseMsg:"Successful",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "first_name": "Sheena",\n                "last_name": "Grace",\n                "virtual_account_number": "3832649897",\n                "beneficiary_account": "1234567890",\n                "customer_identifier": "2086601683696"\n            }\n}'},{status:"400:Bad Request",responseMsg:"Bad Request",pill:a.O?.orangeColor,code:'{\n            "status": 400,\n            "success": false,\n            "message": ""virtual_account_number" is required",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No/Invalid API Key",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'}],S=[{title:"Header",children:[{key:"content-type",dataType:"String",description:"application/json",required:!0},{key:"Authorization",dataType:"String",description:"Private Key or Secret Key (Gotten from your dashboard)",required:!0}]},{title:"Body",children:[{key:"virtual_account_number",dataType:"String",description:"Virtual Account number of customer that wants to make payment.",required:!0},{key:"amount",dataType:"String",description:"Simulated Amount",required:!0}]}],x=[{status:"200:OK",responseMsg:"Successful",pill:a.O?.greenColor,code:'{\n            "success": true,\n            "message": "Success",\n            "data": {}\n}'}],C=[{language:"Javascript",headerOne:"Encryption",headerTwo:"Decryption",codeOne:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                const cipher = crypto.createCipheriv('aes256', key, IV);\n                let encrypted = cipher.update(JSON.stringify(body), 'utf8', 'base64');\n                return encrypted += cipher.final('base64');\n                ",codeTwo:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                const decipher = crypto.createDecipheriv('aes256', key, IV);\n                let decrypted = decipher.update(body, 'base64', 'utf8');\n                decrypted += decipher.final('utf8');\n                return JSON.parse(decrypted);"}],q=[{language:"Python",codeOne:"from Crypto.Cipher import AES\n                import base64\n                import hashlib\n\n\n                def _pad(s): return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size) \n                def _cipher():\n                    key = hashlib.md5(merchant_secret_key).hexdigest() # 32 character hexadecimal\n                    iv = hashlib.md5(merchant_public_key).digest() # 16 byte binary\n                    return AES.new(key=key, mode=AES.MODE_CBC, IV=iv)\n\n                def encrypt_token(data):\n                    return _cipher().encrypt(_pad(data))\n                    \n                def decrypt_token(data):\n                    return _cipher().decrypt(data)\n\n                if __name__ == '__main__':\n                    print('Python encrypt: ' + base64.b64encode(encrypt_token('dmyz.org')))\n                    print('Python decrypt: ' + decrypt_token(base64.b64decode('FSfhJ/gk3iEJOPVLyFVc2Q==')))"}],A=[{language:"PHP",codeOne:" <?php\n\n            class AES\n            {\n                \n                function encryptToken($data, $merchant_secret_key, $merchant_public_key)\n                {\n                    $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                    $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                    // use openssl:\n                    return openssl_encrypt($data, 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                }\n\n                function decryptToken($data, $merchant_secret_key, $merchant_public_key)\n                {\n                    $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                    // use openssl:\n                    return openssl_decrypt(base64_decode($data), 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                \n                }\n            }\n\n            $aes = new AES();\n            $arr = array(\n            'transaction_reference'=>'49test_1',\n            'virtual_account_number'=>'4899284992',\n            'principal_amount'=> '2350.00',\n            'settled_amount'=> '2338.25',\n            'fee_charged'=> '11.75',\n            'transaction_date'=> '2022-02-19T00:00:00.000Z',\n            'customer_identifier'=> '10A2',\n            'transaction_indicator'=> 'C',\n            'remarks'=> 'Payment from 10A2 to 4899284992',\n            'currency'=> 'NGN',\n            'channel'=> 'virtual-account'\n            );\n\n            echo ('PHP encrypt: '.base64_encode($aes->encryptToken(json_encode($arr), 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1'))).\"\n\";\n            echo ('PHP decrypt: '.$aes->decryptToken('Ajc/9TOSwbz1lTReb7BTo4XjL7bzJ0GWIxuncvSXfK83ZsYFt4bOt5+QQRz0jFFNSf6+7Axuqp91rR7aD/YwYczQQgUM+7QrK7nTw1KJbwTvPSSk3/IEektOlUx7DK7uXHlBBN9eVmn8tfDLKrsgj7zhymQhCfCoUTcDou3UyYWbKitwGH0o2X3hZo7cVqqq6Khnb12EwlK2kVhZvAjnu5g+T7erI1+RSb3jjab0MguWO6I3oXs9OGsiQKmCqZn564/q3ojArjk5OR8r3jBFgH4d96FoXS536rS8Toh5KPIVSGUjXLthcsWdgQ2VNzqBJ2iktzftFNgQRMdxQFCpaE0JwTKVkAyX0n3JDXt7DC+cTY+cHvAHRtl0zYhhrqT0WX4x95h+/WCdT27FEIJJJqJPBPHS1VAXwPS/v5sPGqdkqgFngTrYPaExk3YWoTxhonzT2tkagsGCaDuk8eptSA==', 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1')).\"\n\";\n\n            ?>\n                "}],w=[{language:"C#",codeOne:'using System;  \n                using System.IO;  \n                using System.Security.Cryptography;  \n                class ManagedAesSample {  \n                    public static void Main() {  \n                        Console.WriteLine("Enter text that needs to be encrypted..");  \n                        string data = Console.ReadLine();  \n                        EncryptAesManaged(data);  \n                        Console.ReadLine();  \n                    }  \n                    static void EncryptAesManaged(string raw) {  \n                        try {  \n                            // Create Aes that generates a new key and initialization vector (IV).    \n                            // Same key must be used in encryption and decryption    \n                            using(AesManaged aes = new AesManaged()) {  \n                                // Encrypt string    \n                                byte[] encrypted = Encrypt(raw, aes.Key, aes.IV);  \n                                // Print encrypted string    \n                                Console.WriteLine($ "Encrypted data: {System.Text.Encoding.UTF8.GetString(encrypted)}");  \n                                // Decrypt the bytes to a string.    \n                                string decrypted = Decrypt(encrypted, aes.Key, aes.IV);  \n                                // Print decrypted string. It should be same as raw data    \n                                Console.WriteLine($ "Decrypted data: {decrypted}");  \n                            }  \n                        } catch (Exception exp) {  \n                            Console.WriteLine(exp.Message);  \n                        }  \n                        Console.ReadKey();  \n                    }  \n                    static byte[] Encrypt(string plainText, byte[] Key, byte[] IV) {  \n                        byte[] encrypted;  \n                        // Create a new AesManaged.    \n                        using(AesManaged aes = new AesManaged()) {  \n                            // Create encryptor    \n                            ICryptoTransform encryptor = aes.CreateEncryptor(Key, IV);  \n                            // Create MemoryStream    \n                            using(MemoryStream ms = new MemoryStream()) {  \n                                // Create crypto stream using the CryptoStream class. This class is the key to encryption    \n                                // and encrypts and decrypts data from any given stream. In this case, we will pass a memory stream    \n                                // to encrypt    \n                                using(CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write)) {  \n                                    // Create StreamWriter and write data to a stream    \n                                    using(StreamWriter sw = new StreamWriter(cs))  \n                                    sw.Write(plainText);  \n                                    encrypted = ms.ToArray();  \n                                }  \n                            }  \n                        }  \n                        // Return encrypted data    \n                        return encrypted;  \n                    }  \n                    static string Decrypt(byte[] cipherText, byte[] Key, byte[] IV) {  \n                        string plaintext = null;  \n                        // Create AesManaged    \n                        using(AesManaged aes = new AesManaged()) {  \n                            // Create a decryptor    \n                            ICryptoTransform decryptor = aes.CreateDecryptor(Key, IV);  \n                            // Create the streams used for decryption.    \n                            using(MemoryStream ms = new MemoryStream(cipherText)) {  \n                                // Create crypto stream    \n                                using(CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read)) {  \n                                    // Read crypto stream    \n                                    using(StreamReader reader = new StreamReader(cs))  \n                                    plaintext = reader.ReadToEnd();  \n                                }  \n                            }  \n                        }  \n                        return plaintext;  \n                    }  \n}  '}],N=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {}\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],O=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count_dynamic_virtual_account": 8\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Invalid/Wrong API Keys",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],E=[{title:"Body",children:[{key:"amount",dataType:"Integer",description:"Amount is in Kobo",required:!0},{key:"duration",dataType:"Integer",description:"Time allowed before an account/transaction is expired. Duration is in seconds. i.e duration:60 = 1 minute",required:!0},{key:"email",dataType:"string",description:"a valid email address for notification to customer",required:!0},{key:"transaction_ref",dataType:"string",description:"Unique transaction Reference that identifies the transaction on your system",required:!0}]}],j=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "is_blocked": false,\n                "account_name": "SQUAD CHECKOUT",\n                "account_number": "4879261135",\n                "expected_amount": "100.00",\n                "expires_at": "2023-08-08T08:23:27.791Z",\n                "transaction_reference": "dva123",\n                "bank": "GTBank",\n                "currency": "NGN"\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],I=[{title:"Path",children:[{key:"transaction_reference",dataType:"String",description:"Merchant's transaction reference passed when initiating / generating the dynamic virtual account.",required:!0}]}],M=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "count": 3,\n                "rows": [\n                    {\n                        "transaction_status": "EXPIRED",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:59.672Z",\n                        "refund": false\n                    },\n                    {\n                        "transaction_status": "SUCCESS",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:54.052Z",\n                        "refund": null\n                    },\n                    {\n                        "transaction_status": "MISMATCH",\n                        "transaction_reference": "Aq1111BddCDqdddqdqqEw4",\n                        "created_at": "2023-08-08T07:02:29.392Z",\n                        "refund": false\n                    }\n                ]\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}],P=[{title:"Body",children:[{key:"transaction_reference",dataType:"String",description:"The transaction ref of the already initiated transaction.",required:!0},{key:"amount",dataType:"Integer",description:"Amount is in Kobo",required:!1},{key:"duration",dataType:"Integer",description:"Amount of time before transaction expires. Duration is in seconds.",required:!1}]}],D=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": {\n                "account_number": "0852491446",\n                "currency": "NGN",\n                "amount": 5000,\n                "expires_at": "2023-08-30T17:01:46.973Z",\n                "transaction_reference": "ify21"\n            }\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'},{status:"404:Not Found",responseMsg:"Invalid Transaction Ref",pill:a.O?.greenColor,code:'{\n            "status": 404,\n            "success": false,\n            "message": "Transaction not found",\n            "data": {}\n}'}],R=[{title:"Body",children:[{key:"virtual_account_number",dataType:"String",description:"10-digit Dynamic Account gotten after initiating a virtual transfer. ",required:!0},{key:"amount",dataType:"String",description:"Amount is in naira. This is the expected amount to be transferred into the dynamic virtual account.",required:!0},{key:"dva",dataType:"boolean",description:"true",required:!0}]}],z=[{status:"200:OK",responseMsg:"Success",pill:a.O?.greenColor,code:'{\n            "status": 200,\n            "success": true,\n            "message": "Success",\n            "data": "Payment successful"\n}'},{status:"401:Unauthorized",responseMsg:"No Authorization",pill:a.O?.orangeColor,code:'{\n            "success": false,\n            "message": "",\n            "data": {}\n}'},{status:"403:Forbidden",responseMsg:"Wrong/Invalid API Keys",pill:a.O?.greenColor,code:'{\n            "success": false,\n            "message": "Merchant authentication failed",\n            "data": {}\n}'}]}}]);