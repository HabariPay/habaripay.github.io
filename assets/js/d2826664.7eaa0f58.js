"use strict";(self.webpackChunkhabari_docs=self.webpackChunkhabari_docs||[]).push([[877],{3503:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>b,default:()=>f,frontMatter:()=>g,metadata:()=>_,toc:()=>x});var r=t(5893),a=t(1151),s=t(7294),i=t(964),c=t(9286);const o=e=>{let{data:n}=e;const[t,a]=(0,s.useState)(!1),i=t?"open":"",o=t?"rotate-90":"";return(0,r.jsxs)(y,{className:`${i} dark:border-b-[#303337] cursor-pointer`,children:[(0,r.jsxs)("div",{className:"flex justify-between items-center h-12",onClick:()=>{a((e=>!e))},children:[(0,r.jsx)("p",{className:"mb-0 pb-0",children:n?.language}),(0,r.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",height:"1em",viewBox:"0 0 320 512",className:`${o} transition-all justify-self-end dark:fill-white`,children:(0,r.jsx)("path",{d:"M278.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-160 160c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 73.4 118.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l160 160z"})})]}),(0,r.jsx)("div",{className:"accordion-details",children:(0,r.jsxs)("div",{className:"content",children:[(0,r.jsx)("h4",{children:n?.headerOne}),(0,r.jsx)(c.Z,{className:"language-jsx my-5",children:n?.codeOne}),(0,r.jsx)("h4",{className:"pt-6",children:n?.headerTwo}),(0,r.jsx)(c.Z,{className:"language-jsx my-5 pb-5",children:n?.codeTwo})]})})]})};function d(e){let{items:n}=e;return(0,r.jsx)(p,{className:" dark:border-[#303337]",children:(0,r.jsx)("div",{className:"",children:n?.map((e=>(0,r.jsx)(o,{data:e},e.key)))})})}const p=i.ZP.div`
  border: 2px solid #EBEBF2;
  border-radius: 8px;
  padding-inline: 35px;
  padding-block: 8px;
  margin-top: 1.5rem;

  :last-child {
    border-bottom: none;
    margin-bottom: 0px;
    padding-bottom: 0px;
  }

  @media only screen and (max-width: 600px) {
    padding-inline: 15px;
  }
`,y=i.ZP.div`
  margin-bottom: 10px;
  border-bottom: 1px solid #f7f7f7;
  /* padding-bottom: 10px; */
  

  .accordion-details {
    display: grid;
    grid-template-rows: 0fr;
    transition: all 0.4s ease-out;

    .content {
      overflow: hidden;
    }
  }

  &.open {
    .accordion-details {
      grid-template-rows: 1fr;
    }
  }

`,l=[{language:"Javascript",headerOne:"Encryption",headerTwo:"Decryption",codeOne:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                  let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                  const cipher = crypto.createCipheriv('aes256', key, IV);\n                  let encrypted = cipher.update(JSON.stringify(body), 'utf8', 'base64');\n                  return encrypted += cipher.final('base64');\n                  ",codeTwo:" let key = crypto.createHash('sha256').update(String(merchant_secret_key)).digest('base64').substr(0, 32);\n                  let IV = crypto.createHash('sha256').update(String(merchant_public_key)).digest('base64').substr(0, 16);\n                  const decipher = crypto.createDecipheriv('aes256', key, IV);\n                  let decrypted = decipher.update(body, 'base64', 'utf8');\n                  decrypted += decipher.final('utf8');\n                  return JSON.parse(decrypted);"}],m=[{language:"Python",codeOne:"from Crypto.Cipher import AES\n                  import base64\n                  import hashlib\n  \n  \n                  def _pad(s): return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size) \n                  def _cipher():\n                      key = hashlib.md5(merchant_secret_key).hexdigest() # 32 character hexadecimal\n                      iv = hashlib.md5(merchant_public_key).digest() # 16 byte binary\n                      return AES.new(key=key, mode=AES.MODE_CBC, IV=iv)\n  \n                  def encrypt_token(data):\n                      return _cipher().encrypt(_pad(data))\n                      \n                  def decrypt_token(data):\n                      return _cipher().decrypt(data)\n  \n                  if __name__ == '__main__':\n                      print('Python encrypt: ' + base64.b64encode(encrypt_token('dmyz.org')))\n                      print('Python decrypt: ' + decrypt_token(base64.b64decode('FSfhJ/gk3iEJOPVLyFVc2Q==')))"}],u=[{language:"PHP",codeOne:" <?php\n  \n              class AES\n              {\n                  \n                  function encryptToken($data, $merchant_secret_key, $merchant_public_key)\n                  {\n                      $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                      $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                      // use openssl:\n                      return openssl_encrypt($data, 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                  }\n  \n                  function decryptToken($data, $merchant_secret_key, $merchant_public_key)\n                  {\n                      $key = substr(hash('sha256', $merchant_secret_key, true), 0, 32);\n                  $iv = substr(hash('sha256', $merchant_public_key, true), 0, 16);\n                      // use openssl:\n                      return openssl_decrypt(base64_decode($data), 'aes256', $key, OPENSSL_RAW_DATA, $iv);\n                  \n                  }\n              }\n  \n              $aes = new AES();\n              $arr = array(\n              'transaction_reference'=>'49test_1',\n              'virtual_account_number'=>'4899284992',\n              'principal_amount'=> '2350.00',\n              'settled_amount'=> '2338.25',\n              'fee_charged'=> '11.75',\n              'transaction_date'=> '2022-02-19T00:00:00.000Z',\n              'customer_identifier'=> '10A2',\n              'transaction_indicator'=> 'C',\n              'remarks'=> 'Payment from 10A2 to 4899284992',\n              'currency'=> 'NGN',\n              'channel'=> 'virtual-account'\n              );\n  \n              echo ('PHP encrypt: '.base64_encode($aes->encryptToken(json_encode($arr), 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1'))).\"\n\";\n              echo ('PHP decrypt: '.$aes->decryptToken('Ajc/9TOSwbz1lTReb7BTo4XjL7bzJ0GWIxuncvSXfK83ZsYFt4bOt5+QQRz0jFFNSf6+7Axuqp91rR7aD/YwYczQQgUM+7QrK7nTw1KJbwTvPSSk3/IEektOlUx7DK7uXHlBBN9eVmn8tfDLKrsgj7zhymQhCfCoUTcDou3UyYWbKitwGH0o2X3hZo7cVqqq6Khnb12EwlK2kVhZvAjnu5g+T7erI1+RSb3jjab0MguWO6I3oXs9OGsiQKmCqZn564/q3ojArjk5OR8r3jBFgH4d96FoXS536rS8Toh5KPIVSGUjXLthcsWdgQ2VNzqBJ2iktzftFNgQRMdxQFCpaE0JwTKVkAyX0n3JDXt7DC+cTY+cHvAHRtl0zYhhrqT0WX4x95h+/WCdT27FEIJJJqJPBPHS1VAXwPS/v5sPGqdkqgFngTrYPaExk3YWoTxhonzT2tkagsGCaDuk8eptSA==', 'staging_sk_sample-secret-key-1', 'staging_pk_sample-public-key-1')).\"\n\";\n  \n              ?>\n                  "}],h=[{language:"C#",codeOne:'using System;  \n                  using System.IO;  \n                  using System.Security.Cryptography;  \n                  class ManagedAesSample {  \n                      public static void Main() {  \n                          Console.WriteLine("Enter text that needs to be encrypted..");  \n                          string data = Console.ReadLine();  \n                          EncryptAesManaged(data);  \n                          Console.ReadLine();  \n                      }  \n                      static void EncryptAesManaged(string raw) {  \n                          try {  \n                              // Create Aes that generates a new key and initialization vector (IV).    \n                              // Same key must be used in encryption and decryption    \n                              using(AesManaged aes = new AesManaged()) {  \n                                  // Encrypt string    \n                                  byte[] encrypted = Encrypt(raw, aes.Key, aes.IV);  \n                                  // Print encrypted string    \n                                  Console.WriteLine($ "Encrypted data: {System.Text.Encoding.UTF8.GetString(encrypted)}");  \n                                  // Decrypt the bytes to a string.    \n                                  string decrypted = Decrypt(encrypted, aes.Key, aes.IV);  \n                                  // Print decrypted string. It should be same as raw data    \n                                  Console.WriteLine($ "Decrypted data: {decrypted}");  \n                              }  \n                          } catch (Exception exp) {  \n                              Console.WriteLine(exp.Message);  \n                          }  \n                          Console.ReadKey();  \n                      }  \n                      static byte[] Encrypt(string plainText, byte[] Key, byte[] IV) {  \n                          byte[] encrypted;  \n                          // Create a new AesManaged.    \n                          using(AesManaged aes = new AesManaged()) {  \n                              // Create encryptor    \n                              ICryptoTransform encryptor = aes.CreateEncryptor(Key, IV);  \n                              // Create MemoryStream    \n                              using(MemoryStream ms = new MemoryStream()) {  \n                                  // Create crypto stream using the CryptoStream class. This class is the key to encryption    \n                                  // and encrypts and decrypts data from any given stream. In this case, we will pass a memory stream    \n                                  // to encrypt    \n                                  using(CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write)) {  \n                                      // Create StreamWriter and write data to a stream    \n                                      using(StreamWriter sw = new StreamWriter(cs))  \n                                      sw.Write(plainText);  \n                                      encrypted = ms.ToArray();  \n                                  }  \n                              }  \n                          }  \n                          // Return encrypted data    \n                          return encrypted;  \n                      }  \n                      static string Decrypt(byte[] cipherText, byte[] Key, byte[] IV) {  \n                          string plaintext = null;  \n                          // Create AesManaged    \n                          using(AesManaged aes = new AesManaged()) {  \n                              // Create a decryptor    \n                              ICryptoTransform decryptor = aes.CreateDecryptor(Key, IV);  \n                              // Create the streams used for decryption.    \n                              using(MemoryStream ms = new MemoryStream(cipherText)) {  \n                                  // Create crypto stream    \n                                  using(CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read)) {  \n                                      // Read crypto stream    \n                                      using(StreamReader reader = new StreamReader(cs))  \n                                      plaintext = reader.ReadToEnd();  \n                                  }  \n                              }  \n                          }  \n                          return plaintext;  \n                      }  \n  }  '}],g={sidebar_position:3},b="Encryption & Decryption",_={id:"Virtual-accounts/encryption-decryption",title:"Encryption & Decryption",description:"Encryption and Decryption function for decrypting merchant transaction",source:"@site/docs/Virtual-accounts/encryption-decryption.mdx",sourceDirName:"Virtual-accounts",slug:"/Virtual-accounts/encryption-decryption",permalink:"/Virtual-accounts/encryption-decryption",draft:!1,unlisted:!1,editUrl:"https://github.com/HabariPay/habaripay.github.io/tree/main/docs/Virtual-accounts/encryption-decryption.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"API Specifications",permalink:"/Virtual-accounts/api-specifications"},next:{title:"Dynamic Virtual Account",permalink:"/Virtual-accounts/dynamic-virtual-account-v2"}},k={},x=[];function S(e){const n={h1:"h1",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"encryption--decryption",children:"Encryption & Decryption"}),"\n",(0,r.jsx)(n.p,{children:"Encryption and Decryption function for decrypting merchant transaction"}),"\n",(0,r.jsx)(d,{items:l}),"\n",(0,r.jsx)(d,{items:m}),"\n",(0,r.jsx)(d,{items:u}),"\n",(0,r.jsx)(d,{items:h})]})}function f(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(S,{...e})}):S(e)}}}]);